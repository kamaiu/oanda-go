// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson37d51143DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *PositionBookBucket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "longCountPercent":
			out.LongCountPercent = DecimalNumber(in.String())
		case "shortCountPercent":
			out.ShortCountPercent = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson37d51143EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in PositionBookBucket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"longCountPercent\":"
		out.RawString(prefix)
		out.String(string(in.LongCountPercent))
	}
	{
		const prefix string = ",\"shortCountPercent\":"
		out.RawString(prefix)
		out.String(string(in.ShortCountPercent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionBookBucket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionBookBucket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionBookBucket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionBookBucket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson37d51143DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *PositionBook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "bucketWidth":
			out.BucketWidth = PriceValue(in.String())
		case "buckets":
			if in.IsNull() {
				in.Skip()
				out.Buckets = nil
			} else {
				in.Delim('[')
				if out.Buckets == nil {
					if !in.IsDelim(']') {
						out.Buckets = make([]*OrderBookBucket, 0, 8)
					} else {
						out.Buckets = []*OrderBookBucket{}
					}
				} else {
					out.Buckets = (out.Buckets)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *OrderBookBucket
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(OrderBookBucket)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Buckets = append(out.Buckets, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson37d51143EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in PositionBook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"bucketWidth\":"
		out.RawString(prefix)
		out.String(string(in.BucketWidth))
	}
	{
		const prefix string = ",\"buckets\":"
		out.RawString(prefix)
		if in.Buckets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Buckets {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionBook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionBook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionBook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionBook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjson37d51143DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *OrderBookBucket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "longCountPercent":
			out.LongCountPercent = DecimalNumber(in.String())
		case "shortCountPercent":
			out.ShortCountPercent = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson37d51143EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in OrderBookBucket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"longCountPercent\":"
		out.RawString(prefix)
		out.String(string(in.LongCountPercent))
	}
	{
		const prefix string = ",\"shortCountPercent\":"
		out.RawString(prefix)
		out.String(string(in.ShortCountPercent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderBookBucket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderBookBucket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderBookBucket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderBookBucket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjson37d51143DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *OrderBook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "bucketWidth":
			out.BucketWidth = PriceValue(in.String())
		case "buckets":
			if in.IsNull() {
				in.Skip()
				out.Buckets = nil
			} else {
				in.Delim('[')
				if out.Buckets == nil {
					if !in.IsDelim(']') {
						out.Buckets = make([]*OrderBookBucket, 0, 8)
					} else {
						out.Buckets = []*OrderBookBucket{}
					}
				} else {
					out.Buckets = (out.Buckets)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *OrderBookBucket
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(OrderBookBucket)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Buckets = append(out.Buckets, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson37d51143EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in OrderBook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"bucketWidth\":"
		out.RawString(prefix)
		out.String(string(in.BucketWidth))
	}
	{
		const prefix string = ",\"buckets\":"
		out.RawString(prefix)
		if in.Buckets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Buckets {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderBook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderBook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderBook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderBook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjson37d51143DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *CandlestickResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "granularity":
			out.Granularity = CandlestickGranularity(in.String())
		case "candles":
			if in.IsNull() {
				in.Skip()
				out.Candles = nil
			} else {
				in.Delim('[')
				if out.Candles == nil {
					if !in.IsDelim(']') {
						out.Candles = make([]*Candlestick, 0, 8)
					} else {
						out.Candles = []*Candlestick{}
					}
				} else {
					out.Candles = (out.Candles)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Candlestick
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Candlestick)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Candles = append(out.Candles, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson37d51143EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in CandlestickResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"granularity\":"
		out.RawString(prefix)
		out.String(string(in.Granularity))
	}
	{
		const prefix string = ",\"candles\":"
		out.RawString(prefix)
		if in.Candles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Candles {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CandlestickResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CandlestickResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CandlestickResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CandlestickResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjson37d51143DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *CandlestickData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "o":
			out.Open = PriceValue(in.String())
		case "h":
			out.High = PriceValue(in.String())
		case "l":
			out.Low = PriceValue(in.String())
		case "c":
			out.Close = PriceValue(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson37d51143EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in CandlestickData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix[1:])
		out.String(string(in.Open))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.Close))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CandlestickData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CandlestickData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CandlestickData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CandlestickData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjson37d51143DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *Candlestick) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = DateTime(in.String())
		case "bid":
			if in.IsNull() {
				in.Skip()
				out.Bid = nil
			} else {
				if out.Bid == nil {
					out.Bid = new(CandlestickData)
				}
				(*out.Bid).UnmarshalEasyJSON(in)
			}
		case "ask":
			if in.IsNull() {
				in.Skip()
				out.Ask = nil
			} else {
				if out.Ask == nil {
					out.Ask = new(CandlestickData)
				}
				(*out.Ask).UnmarshalEasyJSON(in)
			}
		case "mid":
			if in.IsNull() {
				in.Skip()
				out.Mid = nil
			} else {
				if out.Mid == nil {
					out.Mid = new(CandlestickData)
				}
				(*out.Mid).UnmarshalEasyJSON(in)
			}
		case "volume":
			out.Volume = int64(in.Int64())
		case "complete":
			out.Complete = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson37d51143EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in Candlestick) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"bid\":"
		out.RawString(prefix)
		if in.Bid == nil {
			out.RawString("null")
		} else {
			(*in.Bid).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ask\":"
		out.RawString(prefix)
		if in.Ask == nil {
			out.RawString("null")
		} else {
			(*in.Ask).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"mid\":"
		out.RawString(prefix)
		if in.Mid == nil {
			out.RawString("null")
		} else {
			(*in.Mid).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.Int64(int64(in.Volume))
	}
	{
		const prefix string = ",\"complete\":"
		out.RawString(prefix)
		out.Bool(bool(in.Complete))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Candlestick) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Candlestick) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson37d51143EncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Candlestick) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Candlestick) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson37d51143DecodeGithubComKamaiuOandaGoModel6(l, v)
}
