// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson349b126bDecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *UserAttributes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = int64(in.Int64())
		case "username":
			out.Username = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "divisionAbbreviation":
			out.DivisionAbbreviation = string(in.String())
		case "languageAbbreviation":
			out.LanguageAbbreviation = string(in.String())
		case "homeCurrency":
			out.HomeCurrency = Currency(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in UserAttributes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"divisionAbbreviation\":"
		out.RawString(prefix)
		out.String(string(in.DivisionAbbreviation))
	}
	{
		const prefix string = ",\"languageAbbreviation\":"
		out.RawString(prefix)
		out.String(string(in.LanguageAbbreviation))
	}
	{
		const prefix string = ",\"homeCurrency\":"
		out.RawString(prefix)
		out.String(string(in.HomeCurrency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAttributes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAttributes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAttributes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAttributes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *CalculatedAccountState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "NAV":
			out.NAV = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		case "marginAvailable":
			out.MarginAvailable = AccountUnits(in.String())
		case "positionValue":
			out.PositionValue = AccountUnits(in.String())
		case "marginCloseoutUnrealizedPL":
			out.MarginCloseoutUnrealizedPL = AccountUnits(in.String())
		case "marginCloseoutNAV":
			out.MarginCloseoutNAV = AccountUnits(in.String())
		case "marginCloseoutMarginUsed":
			out.MarginCloseoutMarginUsed = AccountUnits(in.String())
		case "marginCloseoutPercent":
			out.MarginCloseoutPercent = DecimalNumber(in.String())
		case "marginCloseoutPositionValue":
			out.MarginCloseoutPositionValue = DecimalNumber(in.String())
		case "withdrawalLimit":
			out.WithdrawalLimit = AccountUnits(in.String())
		case "marginCallMarginUsed":
			out.MarginCallMarginUsed = AccountUnits(in.String())
		case "marginCallPercent":
			out.MarginCallPercent = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in CalculatedAccountState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix[1:])
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"NAV\":"
		out.RawString(prefix)
		out.String(string(in.NAV))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"marginAvailable\":"
		out.RawString(prefix)
		out.String(string(in.MarginAvailable))
	}
	{
		const prefix string = ",\"positionValue\":"
		out.RawString(prefix)
		out.String(string(in.PositionValue))
	}
	{
		const prefix string = ",\"marginCloseoutUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutUnrealizedPL))
	}
	{
		const prefix string = ",\"marginCloseoutNAV\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutNAV))
	}
	{
		const prefix string = ",\"marginCloseoutMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutMarginUsed))
	}
	{
		const prefix string = ",\"marginCloseoutPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPercent))
	}
	{
		const prefix string = ",\"marginCloseoutPositionValue\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPositionValue))
	}
	{
		const prefix string = ",\"withdrawalLimit\":"
		out.RawString(prefix)
		out.String(string(in.WithdrawalLimit))
	}
	{
		const prefix string = ",\"marginCallMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallMarginUsed))
	}
	{
		const prefix string = ",\"marginCallPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallPercent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CalculatedAccountState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CalculatedAccountState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CalculatedAccountState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CalculatedAccountState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *AccumulatedAccountState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			out.Balance = AccountUnits(in.String())
		case "pl":
			out.PL = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		case "marginCallEnterTime":
			out.MarginCallEnterTime = DateTime(in.String())
		case "marginCallExtensionCount":
			out.MarginCallExtensionCount = int64(in.Int64())
		case "lastMarginCallExtensionTime":
			out.LastMarginCallExtensionTime = DateTime(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in AccumulatedAccountState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix[1:])
		out.String(string(in.Balance))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.PL))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	{
		const prefix string = ",\"marginCallEnterTime\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallEnterTime))
	}
	{
		const prefix string = ",\"marginCallExtensionCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MarginCallExtensionCount))
	}
	{
		const prefix string = ",\"lastMarginCallExtensionTime\":"
		out.RawString(prefix)
		out.String(string(in.LastMarginCallExtensionTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccumulatedAccountState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccumulatedAccountState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccumulatedAccountState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccumulatedAccountState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *AccountSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = AccountID(in.String())
		case "alias":
			out.Alias = string(in.String())
		case "currency":
			out.Currency = Currency(in.String())
		case "createdByUserID":
			out.CreatedByUserID = int64(in.Int64())
		case "createdTime":
			out.CreatedTime = DateTime(in.String())
		case "guaranteedStopLossOrderParameters":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderParameters = nil
			} else {
				if out.GuaranteedStopLossOrderParameters == nil {
					out.GuaranteedStopLossOrderParameters = new(GuaranteedStopLossOrderParameters)
				}
				easyjson349b126bDecodeGithubComKamaiuOandaGoModel4(in, out.GuaranteedStopLossOrderParameters)
			}
		case "guaranteedStopLossOrderMode":
			out.GuaranteedStopLossOrderMode = GuaranteedStopLossOrderMode(in.String())
		case "guaranteedStopLossOrderMutability":
			out.GuaranteedStopLossOrderMutability = GuaranteedStopLossOrderMutability(in.String())
		case "resettablePLTime":
			out.ResettablePLTime = DateTime(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "openTradeCount":
			out.OpenTradeCount = int64(in.Int64())
		case "openPositionCount":
			out.OpenPositionCount = int64(in.Int64())
		case "pendingOrderCount":
			out.PendingOrderCount = int64(in.Int64())
		case "hedgingEnabled":
			out.HedgingEnabled = bool(in.Bool())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "NAV":
			out.NAV = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		case "marginAvailable":
			out.MarginAvailable = AccountUnits(in.String())
		case "positionValue":
			out.PositionValue = AccountUnits(in.String())
		case "marginCloseoutUnrealizedPL":
			out.MarginCloseoutUnrealizedPL = AccountUnits(in.String())
		case "marginCloseoutNAV":
			out.MarginCloseoutNAV = AccountUnits(in.String())
		case "marginCloseoutMarginUsed":
			out.MarginCloseoutMarginUsed = AccountUnits(in.String())
		case "marginCloseoutPercent":
			out.MarginCloseoutPercent = DecimalNumber(in.String())
		case "marginCloseoutPositionValue":
			out.MarginCloseoutPositionValue = DecimalNumber(in.String())
		case "withdrawalLimit":
			out.WithdrawalLimit = AccountUnits(in.String())
		case "marginCallMarginUsed":
			out.MarginCallMarginUsed = AccountUnits(in.String())
		case "marginCallPercent":
			out.MarginCallPercent = DecimalNumber(in.String())
		case "balance":
			out.Balance = AccountUnits(in.String())
		case "pl":
			out.PL = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		case "marginCallEnterTime":
			out.MarginCallEnterTime = DateTime(in.String())
		case "marginCallExtensionCount":
			out.MarginCallExtensionCount = int64(in.Int64())
		case "lastMarginCallExtensionTime":
			out.LastMarginCallExtensionTime = DateTime(in.String())
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in AccountSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"createdByUserID\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedByUserID))
	}
	{
		const prefix string = ",\"createdTime\":"
		out.RawString(prefix)
		out.String(string(in.CreatedTime))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderParameters\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderParameters == nil {
			out.RawString("null")
		} else {
			easyjson349b126bEncodeGithubComKamaiuOandaGoModel4(out, *in.GuaranteedStopLossOrderParameters)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderMode\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedStopLossOrderMode))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderMutability\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedStopLossOrderMutability))
	}
	{
		const prefix string = ",\"resettablePLTime\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePLTime))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"openTradeCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenTradeCount))
	}
	{
		const prefix string = ",\"openPositionCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenPositionCount))
	}
	{
		const prefix string = ",\"pendingOrderCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.PendingOrderCount))
	}
	{
		const prefix string = ",\"hedgingEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.HedgingEnabled))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"NAV\":"
		out.RawString(prefix)
		out.String(string(in.NAV))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"marginAvailable\":"
		out.RawString(prefix)
		out.String(string(in.MarginAvailable))
	}
	{
		const prefix string = ",\"positionValue\":"
		out.RawString(prefix)
		out.String(string(in.PositionValue))
	}
	{
		const prefix string = ",\"marginCloseoutUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutUnrealizedPL))
	}
	{
		const prefix string = ",\"marginCloseoutNAV\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutNAV))
	}
	{
		const prefix string = ",\"marginCloseoutMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutMarginUsed))
	}
	{
		const prefix string = ",\"marginCloseoutPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPercent))
	}
	{
		const prefix string = ",\"marginCloseoutPositionValue\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPositionValue))
	}
	{
		const prefix string = ",\"withdrawalLimit\":"
		out.RawString(prefix)
		out.String(string(in.WithdrawalLimit))
	}
	{
		const prefix string = ",\"marginCallMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallMarginUsed))
	}
	{
		const prefix string = ",\"marginCallPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallPercent))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.String(string(in.Balance))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.PL))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	{
		const prefix string = ",\"marginCallEnterTime\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallEnterTime))
	}
	{
		const prefix string = ",\"marginCallExtensionCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MarginCallExtensionCount))
	}
	{
		const prefix string = ",\"lastMarginCallExtensionTime\":"
		out.RawString(prefix)
		out.String(string(in.LastMarginCallExtensionTime))
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *GuaranteedStopLossOrderParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mutabilityMarketOpen":
			out.MutabilityMarketOpen = GuaranteedStopLossOrderMutability(in.String())
		case "mutabilityMarketHalted":
			out.MutabilityMarketHalted = GuaranteedStopLossOrderMutability(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in GuaranteedStopLossOrderParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mutabilityMarketOpen\":"
		out.RawString(prefix[1:])
		out.String(string(in.MutabilityMarketOpen))
	}
	{
		const prefix string = ",\"mutabilityMarketHalted\":"
		out.RawString(prefix)
		out.String(string(in.MutabilityMarketHalted))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *AccountProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = AccountID(in.String())
		case "mt4AccountID":
			out.MT4AccountID = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Tags = append(out.Tags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in AccountProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"mt4AccountID\":"
		out.RawString(prefix)
		out.Int64(int64(in.MT4AccountID))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tags {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *AccountChangesState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "NAV":
			out.NAV = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		case "marginAvailable":
			out.MarginAvailable = AccountUnits(in.String())
		case "positionValue":
			out.PositionValue = AccountUnits(in.String())
		case "marginCloseoutUnrealizedPL":
			out.MarginCloseoutUnrealizedPL = AccountUnits(in.String())
		case "marginCloseoutNAV":
			out.MarginCloseoutNAV = AccountUnits(in.String())
		case "marginCloseoutMarginUsed":
			out.MarginCloseoutMarginUsed = AccountUnits(in.String())
		case "marginCloseoutPercent":
			out.MarginCloseoutPercent = DecimalNumber(in.String())
		case "marginCloseoutPositionValue":
			out.MarginCloseoutPositionValue = DecimalNumber(in.String())
		case "withdrawalLimit":
			out.WithdrawalLimit = AccountUnits(in.String())
		case "marginCallMarginUsed":
			out.MarginCallMarginUsed = AccountUnits(in.String())
		case "marginCallPercent":
			out.MarginCallPercent = DecimalNumber(in.String())
		case "balance":
			out.Balance = AccountUnits(in.String())
		case "pl":
			out.PL = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		case "marginCallEnterTime":
			out.MarginCallEnterTime = DateTime(in.String())
		case "marginCallExtensionCount":
			out.MarginCallExtensionCount = int64(in.Int64())
		case "lastMarginCallExtensionTime":
			out.LastMarginCallExtensionTime = DateTime(in.String())
		case "orders":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]*DynamicOrderState, 0, 8)
					} else {
						out.Orders = []*DynamicOrderState{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *DynamicOrderState
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(DynamicOrderState)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel7(in, v4)
					}
					out.Orders = append(out.Orders, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "trades":
			if in.IsNull() {
				in.Skip()
				out.Trades = nil
			} else {
				in.Delim('[')
				if out.Trades == nil {
					if !in.IsDelim(']') {
						out.Trades = make([]*CalculatedTradeState, 0, 8)
					} else {
						out.Trades = []*CalculatedTradeState{}
					}
				} else {
					out.Trades = (out.Trades)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *CalculatedTradeState
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(CalculatedTradeState)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel8(in, v5)
					}
					out.Trades = append(out.Trades, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]*CalculatedPositionState, 0, 8)
					} else {
						out.Positions = []*CalculatedPositionState{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *CalculatedPositionState
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(CalculatedPositionState)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel9(in, v6)
					}
					out.Positions = append(out.Positions, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in AccountChangesState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix[1:])
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"NAV\":"
		out.RawString(prefix)
		out.String(string(in.NAV))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"marginAvailable\":"
		out.RawString(prefix)
		out.String(string(in.MarginAvailable))
	}
	{
		const prefix string = ",\"positionValue\":"
		out.RawString(prefix)
		out.String(string(in.PositionValue))
	}
	{
		const prefix string = ",\"marginCloseoutUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutUnrealizedPL))
	}
	{
		const prefix string = ",\"marginCloseoutNAV\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutNAV))
	}
	{
		const prefix string = ",\"marginCloseoutMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutMarginUsed))
	}
	{
		const prefix string = ",\"marginCloseoutPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPercent))
	}
	{
		const prefix string = ",\"marginCloseoutPositionValue\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPositionValue))
	}
	{
		const prefix string = ",\"withdrawalLimit\":"
		out.RawString(prefix)
		out.String(string(in.WithdrawalLimit))
	}
	{
		const prefix string = ",\"marginCallMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallMarginUsed))
	}
	{
		const prefix string = ",\"marginCallPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallPercent))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.String(string(in.Balance))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.PL))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	{
		const prefix string = ",\"marginCallEnterTime\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallEnterTime))
	}
	{
		const prefix string = ",\"marginCallExtensionCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MarginCallExtensionCount))
	}
	{
		const prefix string = ",\"lastMarginCallExtensionTime\":"
		out.RawString(prefix)
		out.String(string(in.LastMarginCallExtensionTime))
	}
	{
		const prefix string = ",\"orders\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Orders {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel7(out, *v8)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"trades\":"
		out.RawString(prefix)
		if in.Trades == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Trades {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel8(out, *v10)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"positions\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Positions {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel9(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountChangesState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountChangesState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountChangesState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountChangesState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel6(l, v)
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *CalculatedPositionState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "netUnrealizedPL":
			out.NetUnrealizedPL = AccountUnits(in.String())
		case "longUnrealizedPL":
			out.LongUnrealizedPL = AccountUnits(in.String())
		case "shortUnrealizedPL":
			out.ShortUnrealizedPL = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in CalculatedPositionState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"netUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.NetUnrealizedPL))
	}
	{
		const prefix string = ",\"longUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.LongUnrealizedPL))
	}
	{
		const prefix string = ",\"shortUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.ShortUnrealizedPL))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *CalculatedTradeState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = TradeID(in.String())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in CalculatedTradeState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *DynamicOrderState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = OrderID(in.String())
		case "trailingStopValue":
			out.TrailingStopValue = PriceValue(in.String())
		case "triggerDistance":
			out.TriggerDistance = PriceValue(in.String())
		case "isTriggerDistanceExact":
			out.IsTriggerDistanceExact = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in DynamicOrderState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"trailingStopValue\":"
		out.RawString(prefix)
		out.String(string(in.TrailingStopValue))
	}
	{
		const prefix string = ",\"triggerDistance\":"
		out.RawString(prefix)
		out.String(string(in.TriggerDistance))
	}
	{
		const prefix string = ",\"isTriggerDistanceExact\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTriggerDistanceExact))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel10(in *jlexer.Lexer, out *AccountChanges) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ordersCreated":
			if in.IsNull() {
				in.Skip()
				out.OrdersCreated = nil
			} else {
				in.Delim('[')
				if out.OrdersCreated == nil {
					if !in.IsDelim(']') {
						out.OrdersCreated = make([]*Order, 0, 8)
					} else {
						out.OrdersCreated = []*Order{}
					}
				} else {
					out.OrdersCreated = (out.OrdersCreated)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *Order
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(Order)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel11(in, v13)
					}
					out.OrdersCreated = append(out.OrdersCreated, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ordersCancelled":
			if in.IsNull() {
				in.Skip()
				out.OrdersCancelled = nil
			} else {
				in.Delim('[')
				if out.OrdersCancelled == nil {
					if !in.IsDelim(']') {
						out.OrdersCancelled = make([]*Order, 0, 8)
					} else {
						out.OrdersCancelled = []*Order{}
					}
				} else {
					out.OrdersCancelled = (out.OrdersCancelled)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *Order
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(Order)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel11(in, v14)
					}
					out.OrdersCancelled = append(out.OrdersCancelled, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ordersFilled":
			if in.IsNull() {
				in.Skip()
				out.OrdersFilled = nil
			} else {
				in.Delim('[')
				if out.OrdersFilled == nil {
					if !in.IsDelim(']') {
						out.OrdersFilled = make([]*Order, 0, 8)
					} else {
						out.OrdersFilled = []*Order{}
					}
				} else {
					out.OrdersFilled = (out.OrdersFilled)[:0]
				}
				for !in.IsDelim(']') {
					var v15 *Order
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(Order)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel11(in, v15)
					}
					out.OrdersFilled = append(out.OrdersFilled, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ordersTriggered":
			if in.IsNull() {
				in.Skip()
				out.OrdersTriggered = nil
			} else {
				in.Delim('[')
				if out.OrdersTriggered == nil {
					if !in.IsDelim(']') {
						out.OrdersTriggered = make([]*Order, 0, 8)
					} else {
						out.OrdersTriggered = []*Order{}
					}
				} else {
					out.OrdersTriggered = (out.OrdersTriggered)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *Order
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(Order)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel11(in, v16)
					}
					out.OrdersTriggered = append(out.OrdersTriggered, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradesOpened":
			if in.IsNull() {
				in.Skip()
				out.TradesOpened = nil
			} else {
				in.Delim('[')
				if out.TradesOpened == nil {
					if !in.IsDelim(']') {
						out.TradesOpened = make([]*TradeSummary, 0, 8)
					} else {
						out.TradesOpened = []*TradeSummary{}
					}
				} else {
					out.TradesOpened = (out.TradesOpened)[:0]
				}
				for !in.IsDelim(']') {
					var v17 *TradeSummary
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(TradeSummary)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel12(in, v17)
					}
					out.TradesOpened = append(out.TradesOpened, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradesReduced":
			if in.IsNull() {
				in.Skip()
				out.TradesReduced = nil
			} else {
				in.Delim('[')
				if out.TradesReduced == nil {
					if !in.IsDelim(']') {
						out.TradesReduced = make([]*TradeSummary, 0, 8)
					} else {
						out.TradesReduced = []*TradeSummary{}
					}
				} else {
					out.TradesReduced = (out.TradesReduced)[:0]
				}
				for !in.IsDelim(']') {
					var v18 *TradeSummary
					if in.IsNull() {
						in.Skip()
						v18 = nil
					} else {
						if v18 == nil {
							v18 = new(TradeSummary)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel12(in, v18)
					}
					out.TradesReduced = append(out.TradesReduced, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradesClosed":
			if in.IsNull() {
				in.Skip()
				out.TradesClosed = nil
			} else {
				in.Delim('[')
				if out.TradesClosed == nil {
					if !in.IsDelim(']') {
						out.TradesClosed = make([]*TradeSummary, 0, 8)
					} else {
						out.TradesClosed = []*TradeSummary{}
					}
				} else {
					out.TradesClosed = (out.TradesClosed)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *TradeSummary
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(TradeSummary)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel12(in, v19)
					}
					out.TradesClosed = append(out.TradesClosed, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]*Position, 0, 8)
					} else {
						out.Positions = []*Position{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v20 *Position
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(Position)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel13(in, v20)
					}
					out.Positions = append(out.Positions, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]*Transaction, 0, 8)
					} else {
						out.Transactions = []*Transaction{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *Transaction
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new(Transaction)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel14(in, v21)
					}
					out.Transactions = append(out.Transactions, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel10(out *jwriter.Writer, in AccountChanges) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ordersCreated\":"
		out.RawString(prefix[1:])
		if in.OrdersCreated == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.OrdersCreated {
				if v22 > 0 {
					out.RawByte(',')
				}
				if v23 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel11(out, *v23)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ordersCancelled\":"
		out.RawString(prefix)
		if in.OrdersCancelled == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.OrdersCancelled {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel11(out, *v25)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ordersFilled\":"
		out.RawString(prefix)
		if in.OrdersFilled == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.OrdersFilled {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel11(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ordersTriggered\":"
		out.RawString(prefix)
		if in.OrdersTriggered == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.OrdersTriggered {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel11(out, *v29)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tradesOpened\":"
		out.RawString(prefix)
		if in.TradesOpened == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.TradesOpened {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel12(out, *v31)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tradesReduced\":"
		out.RawString(prefix)
		if in.TradesReduced == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.TradesReduced {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel12(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tradesClosed\":"
		out.RawString(prefix)
		if in.TradesClosed == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.TradesClosed {
				if v34 > 0 {
					out.RawByte(',')
				}
				if v35 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel12(out, *v35)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"positions\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Positions {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel13(out, *v37)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix)
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Transactions {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel14(out, *v39)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountChanges) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountChanges) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountChanges) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountChanges) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel10(l, v)
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel14(in *jlexer.Lexer, out *Transaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel14(out *jwriter.Writer, in Transaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel13(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "pl":
			out.Pl = AccountUnits(in.String())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		case "long":
			if in.IsNull() {
				in.Skip()
				out.Long = nil
			} else {
				if out.Long == nil {
					out.Long = new(PositionSide)
				}
				easyjson349b126bDecodeGithubComKamaiuOandaGoModel15(in, out.Long)
			}
		case "short":
			if in.IsNull() {
				in.Skip()
				out.Short = nil
			} else {
				if out.Short == nil {
					out.Short = new(PositionSide)
				}
				easyjson349b126bDecodeGithubComKamaiuOandaGoModel15(in, out.Short)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel13(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	{
		const prefix string = ",\"long\":"
		out.RawString(prefix)
		if in.Long == nil {
			out.RawString("null")
		} else {
			easyjson349b126bEncodeGithubComKamaiuOandaGoModel15(out, *in.Long)
		}
	}
	{
		const prefix string = ",\"short\":"
		out.RawString(prefix)
		if in.Short == nil {
			out.RawString("null")
		} else {
			easyjson349b126bEncodeGithubComKamaiuOandaGoModel15(out, *in.Short)
		}
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel15(in *jlexer.Lexer, out *PositionSide) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "units":
			out.Units = DecimalNumber(in.String())
		case "averagePrice":
			out.AveragePrice = PriceValue(in.String())
		case "tradeIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeIDs = nil
			} else {
				in.Delim('[')
				if out.TradeIDs == nil {
					if !in.IsDelim(']') {
						out.TradeIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeIDs = []TradeID{}
					}
				} else {
					out.TradeIDs = (out.TradeIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v40 TradeID
					v40 = TradeID(in.String())
					out.TradeIDs = append(out.TradeIDs, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pl":
			out.Pl = AccountUnits(in.String())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel15(out *jwriter.Writer, in PositionSide) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix[1:])
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"averagePrice\":"
		out.RawString(prefix)
		out.String(string(in.AveragePrice))
	}
	{
		const prefix string = ",\"tradeIDs\":"
		out.RawString(prefix)
		if in.TradeIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.TradeIDs {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel12(in *jlexer.Lexer, out *TradeSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = TradeID(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "openTime":
			out.OpenTime = DateTime(in.String())
		case "state":
			out.State = TradeState(in.String())
		case "initialUnits":
			out.InitialUnits = DecimalNumber(in.String())
		case "initialMarginRequired":
			out.InitialMarginRequired = AccountUnits(in.String())
		case "currentUnits":
			out.CurrentUnits = DecimalNumber(in.String())
		case "realizedPL":
			out.RealizedPL = AccountUnits(in.String())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		case "averageClosePrice":
			out.AverageClosePrice = PriceValue(in.String())
		case "closingTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.ClosingTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.ClosingTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.ClosingTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.ClosingTransactionIDs = []TransactionID{}
					}
				} else {
					out.ClosingTransactionIDs = (out.ClosingTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v43 TransactionID
					v43 = TransactionID(in.String())
					out.ClosingTransactionIDs = append(out.ClosingTransactionIDs, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "closeTime":
			out.CloseTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson349b126bDecodeGithubComKamaiuOandaGoModel16(in, out.ClientExtensions)
			}
		case "takeProfitOrderID":
			out.TakeProfitOrderID = OrderID(in.String())
		case "stopLossOrderID":
			out.StopLossOrderID = OrderID(in.String())
		case "guaranteedStopLossOrderID":
			out.GuaranteedStopLossOrderID = OrderID(in.String())
		case "trailingStopLossOrderID":
			out.TrailingStopLossOrderID = OrderID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel12(out *jwriter.Writer, in TradeSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"openTime\":"
		out.RawString(prefix)
		out.String(string(in.OpenTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"initialUnits\":"
		out.RawString(prefix)
		out.String(string(in.InitialUnits))
	}
	{
		const prefix string = ",\"initialMarginRequired\":"
		out.RawString(prefix)
		out.String(string(in.InitialMarginRequired))
	}
	{
		const prefix string = ",\"currentUnits\":"
		out.RawString(prefix)
		out.String(string(in.CurrentUnits))
	}
	{
		const prefix string = ",\"realizedPL\":"
		out.RawString(prefix)
		out.String(string(in.RealizedPL))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"averageClosePrice\":"
		out.RawString(prefix)
		out.String(string(in.AverageClosePrice))
	}
	{
		const prefix string = ",\"closingTransactionIDs\":"
		out.RawString(prefix)
		if in.ClosingTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.ClosingTransactionIDs {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"closeTime\":"
		out.RawString(prefix)
		out.String(string(in.CloseTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson349b126bEncodeGithubComKamaiuOandaGoModel16(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderID\":"
		out.RawString(prefix)
		out.String(string(in.TakeProfitOrderID))
	}
	{
		const prefix string = ",\"stopLossOrderID\":"
		out.RawString(prefix)
		out.String(string(in.StopLossOrderID))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderID\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedStopLossOrderID))
	}
	{
		const prefix string = ",\"trailingStopLossOrderID\":"
		out.RawString(prefix)
		out.String(string(in.TrailingStopLossOrderID))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel16(in *jlexer.Lexer, out *ClientExtensions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ClientID(in.String())
		case "tag":
			out.Tag = ClientTag(in.String())
		case "comment":
			out.Comment = ClientComment(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel16(out *jwriter.Writer, in ClientExtensions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel11(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson349b126bDecodeGithubComKamaiuOandaGoModel16(in, out.ClientExtensions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel11(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson349b126bEncodeGithubComKamaiuOandaGoModel16(out, *in.ClientExtensions)
		}
	}
	out.RawByte('}')
}
func easyjson349b126bDecodeGithubComKamaiuOandaGoModel17(in *jlexer.Lexer, out *Account) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = AccountID(in.String())
		case "alias":
			out.Alias = string(in.String())
		case "currency":
			out.Currency = Currency(in.String())
		case "createdByUserID":
			out.CreatedByUserID = int64(in.Int64())
		case "createdTime":
			out.CreatedTime = DateTime(in.String())
		case "guaranteedStopLossOrderParameters":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderParameters = nil
			} else {
				if out.GuaranteedStopLossOrderParameters == nil {
					out.GuaranteedStopLossOrderParameters = new(GuaranteedStopLossOrderParameters)
				}
				easyjson349b126bDecodeGithubComKamaiuOandaGoModel4(in, out.GuaranteedStopLossOrderParameters)
			}
		case "guaranteedStopLossOrderMode":
			out.GuaranteedStopLossOrderMode = GuaranteedStopLossOrderMode(in.String())
		case "guaranteedStopLossOrderMutability":
			out.GuaranteedStopLossOrderMutability = GuaranteedStopLossOrderMutability(in.String())
		case "resettablePLTime":
			out.ResettablePLTime = DateTime(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "openTradeCount":
			out.OpenTradeCount = int64(in.Int64())
		case "openPositionCount":
			out.OpenPositionCount = int64(in.Int64())
		case "pendingOrderCount":
			out.PendingOrderCount = int64(in.Int64())
		case "hedgingEnabled":
			out.HedgingEnabled = bool(in.Bool())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "NAV":
			out.NAV = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		case "marginAvailable":
			out.MarginAvailable = AccountUnits(in.String())
		case "positionValue":
			out.PositionValue = AccountUnits(in.String())
		case "marginCloseoutUnrealizedPL":
			out.MarginCloseoutUnrealizedPL = AccountUnits(in.String())
		case "marginCloseoutNAV":
			out.MarginCloseoutNAV = AccountUnits(in.String())
		case "marginCloseoutMarginUsed":
			out.MarginCloseoutMarginUsed = AccountUnits(in.String())
		case "marginCloseoutPercent":
			out.MarginCloseoutPercent = DecimalNumber(in.String())
		case "marginCloseoutPositionValue":
			out.MarginCloseoutPositionValue = DecimalNumber(in.String())
		case "withdrawalLimit":
			out.WithdrawalLimit = AccountUnits(in.String())
		case "marginCallMarginUsed":
			out.MarginCallMarginUsed = AccountUnits(in.String())
		case "marginCallPercent":
			out.MarginCallPercent = DecimalNumber(in.String())
		case "balance":
			out.Balance = AccountUnits(in.String())
		case "pl":
			out.PL = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		case "marginCallEnterTime":
			out.MarginCallEnterTime = DateTime(in.String())
		case "marginCallExtensionCount":
			out.MarginCallExtensionCount = int64(in.Int64())
		case "lastMarginCallExtensionTime":
			out.LastMarginCallExtensionTime = DateTime(in.String())
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "trades":
			if in.IsNull() {
				in.Skip()
				out.Trades = nil
			} else {
				in.Delim('[')
				if out.Trades == nil {
					if !in.IsDelim(']') {
						out.Trades = make([]*TradeSummary, 0, 8)
					} else {
						out.Trades = []*TradeSummary{}
					}
				} else {
					out.Trades = (out.Trades)[:0]
				}
				for !in.IsDelim(']') {
					var v46 *TradeSummary
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(TradeSummary)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel12(in, v46)
					}
					out.Trades = append(out.Trades, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]*Position, 0, 8)
					} else {
						out.Positions = []*Position{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v47 *Position
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						if v47 == nil {
							v47 = new(Position)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel13(in, v47)
					}
					out.Positions = append(out.Positions, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "orders":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]*Order, 0, 8)
					} else {
						out.Orders = []*Order{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v48 *Order
					if in.IsNull() {
						in.Skip()
						v48 = nil
					} else {
						if v48 == nil {
							v48 = new(Order)
						}
						easyjson349b126bDecodeGithubComKamaiuOandaGoModel11(in, v48)
					}
					out.Orders = append(out.Orders, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComKamaiuOandaGoModel17(out *jwriter.Writer, in Account) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"createdByUserID\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedByUserID))
	}
	{
		const prefix string = ",\"createdTime\":"
		out.RawString(prefix)
		out.String(string(in.CreatedTime))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderParameters\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderParameters == nil {
			out.RawString("null")
		} else {
			easyjson349b126bEncodeGithubComKamaiuOandaGoModel4(out, *in.GuaranteedStopLossOrderParameters)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderMode\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedStopLossOrderMode))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderMutability\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedStopLossOrderMutability))
	}
	{
		const prefix string = ",\"resettablePLTime\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePLTime))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"openTradeCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenTradeCount))
	}
	{
		const prefix string = ",\"openPositionCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenPositionCount))
	}
	{
		const prefix string = ",\"pendingOrderCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.PendingOrderCount))
	}
	{
		const prefix string = ",\"hedgingEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.HedgingEnabled))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"NAV\":"
		out.RawString(prefix)
		out.String(string(in.NAV))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"marginAvailable\":"
		out.RawString(prefix)
		out.String(string(in.MarginAvailable))
	}
	{
		const prefix string = ",\"positionValue\":"
		out.RawString(prefix)
		out.String(string(in.PositionValue))
	}
	{
		const prefix string = ",\"marginCloseoutUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutUnrealizedPL))
	}
	{
		const prefix string = ",\"marginCloseoutNAV\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutNAV))
	}
	{
		const prefix string = ",\"marginCloseoutMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutMarginUsed))
	}
	{
		const prefix string = ",\"marginCloseoutPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPercent))
	}
	{
		const prefix string = ",\"marginCloseoutPositionValue\":"
		out.RawString(prefix)
		out.String(string(in.MarginCloseoutPositionValue))
	}
	{
		const prefix string = ",\"withdrawalLimit\":"
		out.RawString(prefix)
		out.String(string(in.WithdrawalLimit))
	}
	{
		const prefix string = ",\"marginCallMarginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallMarginUsed))
	}
	{
		const prefix string = ",\"marginCallPercent\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallPercent))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.String(string(in.Balance))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.PL))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	{
		const prefix string = ",\"marginCallEnterTime\":"
		out.RawString(prefix)
		out.String(string(in.MarginCallEnterTime))
	}
	{
		const prefix string = ",\"marginCallExtensionCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MarginCallExtensionCount))
	}
	{
		const prefix string = ",\"lastMarginCallExtensionTime\":"
		out.RawString(prefix)
		out.String(string(in.LastMarginCallExtensionTime))
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"trades\":"
		out.RawString(prefix)
		if in.Trades == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Trades {
				if v49 > 0 {
					out.RawByte(',')
				}
				if v50 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel12(out, *v50)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"positions\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Positions {
				if v51 > 0 {
					out.RawByte(',')
				}
				if v52 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel13(out, *v52)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"orders\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Orders {
				if v53 > 0 {
					out.RawByte(',')
				}
				if v54 == nil {
					out.RawString("null")
				} else {
					easyjson349b126bEncodeGithubComKamaiuOandaGoModel11(out, *v54)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Account) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComKamaiuOandaGoModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Account) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComKamaiuOandaGoModel17(l, v)
}
