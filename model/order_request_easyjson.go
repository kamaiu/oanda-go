// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *TrailingStopLossOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in TrailingStopLossOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrailingStopLossOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrailingStopLossOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrailingStopLossOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrailingStopLossOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *TakeProfitOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in TakeProfitOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TakeProfitOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TakeProfitOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TakeProfitOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TakeProfitOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *StopOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in StopOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *StopLossOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in StopLossOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopLossOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopLossOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopLossOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopLossOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *OrderRequestParser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "clientTradeID":
			out.ClientTradeID = string(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "tradeID":
			out.TradeID = string(in.String())
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "triggerCondition":
			out.TriggerCondition = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in OrderRequestParser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix[1:])
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderRequestParser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderRequestParser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderRequestParser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderRequestParser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *MarketOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in MarketOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *MarketIfTouchedOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in MarketIfTouchedOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketIfTouchedOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketIfTouchedOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketIfTouchedOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketIfTouchedOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel6(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *LimitOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in LimitOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel7(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *GuaranteedStopLossOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in GuaranteedStopLossOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuaranteedStopLossOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuaranteedStopLossOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuaranteedStopLossOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuaranteedStopLossOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel8(l, v)
}
func easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *BaseOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in BaseOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0c32110EncodeGithubComKamaiuOandaGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0c32110DecodeGithubComKamaiuOandaGoModel9(l, v)
}
