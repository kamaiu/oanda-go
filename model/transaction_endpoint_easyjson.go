// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *TransactionsSinceIDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = TransactionID(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]TransactionFilter, 0, 4)
					} else {
						out.Type = []TransactionFilter{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TransactionFilter
					v1 = TransactionFilter(in.String())
					out.Type = append(out.Type, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in TransactionsSinceIDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Type {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionsSinceIDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionsSinceIDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionsSinceIDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionsSinceIDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *TransactionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]*TransactionParser, 0, 8)
					} else {
						out.Transactions = []*TransactionParser{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *TransactionParser
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(TransactionParser)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Transactions = append(out.Transactions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in TransactionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix[1:])
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Transactions {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *TransactionsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = DateTime(in.String())
		case "to":
			out.To = DateTime(in.String())
		case "pageSize":
			out.PageSize = int(in.Int())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]TransactionFilter, 0, 4)
					} else {
						out.Type = []TransactionFilter{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TransactionFilter
					v7 = TransactionFilter(in.String())
					out.Type = append(out.Type, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in TransactionsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int(int(in.PageSize))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Type {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *TransactionsPagesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = DateTime(in.String())
		case "to":
			out.To = DateTime(in.String())
		case "pageSize":
			out.PageSize = int64(in.Int64())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]TransactionFilter, 0, 4)
					} else {
						out.Type = []TransactionFilter{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v10 TransactionFilter
					v10 = TransactionFilter(in.String())
					out.Type = append(out.Type, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "count":
			out.Count = int64(in.Int64())
		case "pages":
			if in.IsNull() {
				in.Skip()
				out.Pages = nil
			} else {
				in.Delim('[')
				if out.Pages == nil {
					if !in.IsDelim(']') {
						out.Pages = make([]string, 0, 4)
					} else {
						out.Pages = []string{}
					}
				} else {
					out.Pages = (out.Pages)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Pages = append(out.Pages, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in TransactionsPagesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.PageSize))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Type {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		if in.Pages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Pages {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionsPagesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionsPagesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionsPagesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionsPagesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *TransactionsIDRangeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = TransactionID(in.String())
		case "to":
			out.To = TransactionID(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]TransactionFilter, 0, 4)
					} else {
						out.Type = []TransactionFilter{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TransactionFilter
					v16 = TransactionFilter(in.String())
					out.Type = append(out.Type, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in TransactionsIDRangeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Type {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionsIDRangeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionsIDRangeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionsIDRangeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionsIDRangeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *TransactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transaction":
			if in.IsNull() {
				in.Skip()
				out.Transaction = nil
			} else {
				if out.Transaction == nil {
					out.Transaction = new(TransactionParser)
				}
				(*out.Transaction).UnmarshalEasyJSON(in)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in TransactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transaction\":"
		out.RawString(prefix[1:])
		if in.Transaction == nil {
			out.RawString("null")
		} else {
			(*in.Transaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE82c8e88EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE82c8e88DecodeGithubComKamaiuOandaGoModel5(l, v)
}
