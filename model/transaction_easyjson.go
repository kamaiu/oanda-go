// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *TransferFundsTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "amount":
			out.Amount = AccountUnits(in.String())
		case "fundingReason":
			out.FundingReason = FundingReason(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "accountBalance":
			out.AccountBalance = AccountUnits(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in TransferFundsTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"fundingReason\":"
		out.RawString(prefix)
		out.String(string(in.FundingReason))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"accountBalance\":"
		out.RawString(prefix)
		out.String(string(in.AccountBalance))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferFundsTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferFundsTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferFundsTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferFundsTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *TransferFundsRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "amount":
			out.Amount = AccountUnits(in.String())
		case "fundingReason":
			out.FundingReason = FundingReason(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in TransferFundsRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"fundingReason\":"
		out.RawString(prefix)
		out.String(string(in.FundingReason))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferFundsRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferFundsRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferFundsRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferFundsRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *TransactionParser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountBalance":
			out.AccountBalance = AccountUnits(in.String())
		case "accountFinancingMode":
			out.AccountFinancingMode = AccountFinancingMode(in.String())
		case "accountID":
			out.AccountID = string(in.String())
		case "accountNumber":
			out.AccountNumber = int64(in.Int64())
		case "accountUserID":
			out.AccountUserID = int64(in.Int64())
		case "alias":
			out.Alias = string(in.String())
		case "amount":
			out.Amount = AccountUnits(in.String())
		case "baseFinancing":
			out.BaseFinancing = DecimalNumber(in.String())
		case "batchID":
			out.BatchID = string(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = string(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "clientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensionsModify = nil
			} else {
				if out.ClientExtensionsModify == nil {
					out.ClientExtensionsModify = new(ClientExtensions)
				}
				(*out.ClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "clientOrderID":
			out.ClientOrderID = string(in.String())
		case "clientTradeID":
			out.ClientTradeID = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "delayedTradeClose":
			if in.IsNull() {
				in.Skip()
				out.DelayedTradeClose = nil
			} else {
				if out.DelayedTradeClose == nil {
					out.DelayedTradeClose = new(MarketOrderDelayedTradeClose)
				}
				(*out.DelayedTradeClose).UnmarshalEasyJSON(in)
			}
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "divisionID":
			out.DivisionID = int64(in.Int64())
		case "extensionNumber":
			out.ExtensionNumber = int64(in.Int64())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "fullPrice":
			(out.FullPrice).UnmarshalEasyJSON(in)
		case "fullVWAP":
			out.FullVWAP = PriceValue(in.String())
		case "fundingReason":
			out.FundingReason = string(in.String())
		case "gainQuoteHomeConversionFactor":
			out.GainQuoteHomeConversionFactor = DecimalNumber(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "guaranteedExecutionFee":
			out.GuaranteedExecutionFee = AccountUnits(in.String())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "halfSpreadCost":
			out.HalfSpreadCost = AccountUnits(in.String())
		case "homeConversionFactors":
			if in.IsNull() {
				in.Skip()
				out.HomeConversionFactors = nil
			} else {
				if out.HomeConversionFactors == nil {
					out.HomeConversionFactors = new(HomeConversionFactors)
				}
				(*out.HomeConversionFactors).UnmarshalEasyJSON(in)
			}
		case "homeCurrency":
			out.HomeCurrency = Currency(in.String())
		case "id":
			out.Id = string(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = string(in.String())
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "longPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.LongPositionCloseout = nil
			} else {
				if out.LongPositionCloseout == nil {
					out.LongPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.LongPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "lossQuoteHomeConversionFactor":
			out.LossQuoteHomeConversionFactor = DecimalNumber(in.String())
		case "marginCloseout":
			if in.IsNull() {
				in.Skip()
				out.MarginCloseout = nil
			} else {
				if out.MarginCloseout == nil {
					out.MarginCloseout = new(MarketOrderMarginCloseout)
				}
				(*out.MarginCloseout).UnmarshalEasyJSON(in)
			}
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "openTradeDividendAdjustments":
			if in.IsNull() {
				in.Skip()
				out.OpenTradeDividendAdjustments = nil
			} else {
				in.Delim('[')
				if out.OpenTradeDividendAdjustments == nil {
					if !in.IsDelim(']') {
						out.OpenTradeDividendAdjustments = make([]*OpenTradeDividendAdjustment, 0, 8)
					} else {
						out.OpenTradeDividendAdjustments = []*OpenTradeDividendAdjustment{}
					}
				} else {
					out.OpenTradeDividendAdjustments = (out.OpenTradeDividendAdjustments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *OpenTradeDividendAdjustment
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(OpenTradeDividendAdjustment)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.OpenTradeDividendAdjustments = append(out.OpenTradeDividendAdjustments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = string(in.String())
		case "orderID":
			out.OrderID = string(in.String())
		case "pl":
			out.Pl = AccountUnits(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "positionFinancings":
			if in.IsNull() {
				in.Skip()
				out.PositionFinancings = nil
			} else {
				in.Delim('[')
				if out.PositionFinancings == nil {
					if !in.IsDelim(']') {
						out.PositionFinancings = make([]*PositionFinancing, 0, 8)
					} else {
						out.PositionFinancings = []*PositionFinancing{}
					}
				} else {
					out.PositionFinancings = (out.PositionFinancings)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *PositionFinancing
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(PositionFinancing)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.PositionFinancings = append(out.PositionFinancings, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "quoteDividendAdjustment":
			out.QuoteDividendAdjustment = DecimalNumber(in.String())
		case "quoteFinancing":
			out.QuoteFinancing = DecimalNumber(in.String())
		case "quoteGuaranteedExecutionFee":
			out.QuoteGuaranteedExecutionFee = DecimalNumber(in.String())
		case "quotePL":
			out.QuotePL = DecimalNumber(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "rejectReason":
			out.RejectReason = string(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = string(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = string(in.String())
		case "requestID":
			out.RequestID = string(in.String())
		case "shortPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.ShortPositionCloseout = nil
			} else {
				if out.ShortPositionCloseout == nil {
					out.ShortPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.ShortPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "siteID":
			out.SiteID = int64(in.Int64())
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "time":
			out.Time = DateTime(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModify = nil
			} else {
				if out.TradeClientExtensionsModify == nil {
					out.TradeClientExtensionsModify = new(ClientExtensions)
				}
				(*out.TradeClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "tradeClose":
			if in.IsNull() {
				in.Skip()
				out.TradeClose = nil
			} else {
				if out.TradeClose == nil {
					out.TradeClose = new(MarketOrderTradeClose)
				}
				(*out.TradeClose).UnmarshalEasyJSON(in)
			}
		case "tradeID":
			out.TradeID = string(in.String())
		case "tradeIDs":
			out.TradeIDs = string(in.String())
		case "tradeOpened":
			if in.IsNull() {
				in.Skip()
				out.TradeOpened = nil
			} else {
				if out.TradeOpened == nil {
					out.TradeOpened = new(TradeOpen)
				}
				(*out.TradeOpened).UnmarshalEasyJSON(in)
			}
		case "tradeReduced":
			if in.IsNull() {
				in.Skip()
				out.TradeReduced = nil
			} else {
				if out.TradeReduced == nil {
					out.TradeReduced = new(TradeReduce)
				}
				(*out.TradeReduced).UnmarshalEasyJSON(in)
			}
		case "tradeState":
			out.TradeState = string(in.String())
		case "tradesClosed":
			if in.IsNull() {
				in.Skip()
				out.TradesClosed = nil
			} else {
				in.Delim('[')
				if out.TradesClosed == nil {
					if !in.IsDelim(']') {
						out.TradesClosed = make([]*TradeReduce, 0, 8)
					} else {
						out.TradesClosed = []*TradeReduce{}
					}
				} else {
					out.TradesClosed = (out.TradesClosed)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *TradeReduce
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(TradeReduce)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.TradesClosed = append(out.TradesClosed, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "triggerCondition":
			out.TriggerCondition = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in TransactionParser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountBalance\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountBalance))
	}
	{
		const prefix string = ",\"accountFinancingMode\":"
		out.RawString(prefix)
		out.String(string(in.AccountFinancingMode))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"accountNumber\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountNumber))
	}
	{
		const prefix string = ",\"accountUserID\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountUserID))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"baseFinancing\":"
		out.RawString(prefix)
		out.String(string(in.BaseFinancing))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"clientExtensionsModify\":"
		out.RawString(prefix)
		if in.ClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"delayedTradeClose\":"
		out.RawString(prefix)
		if in.DelayedTradeClose == nil {
			out.RawString("null")
		} else {
			(*in.DelayedTradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"divisionID\":"
		out.RawString(prefix)
		out.Int64(int64(in.DivisionID))
	}
	{
		const prefix string = ",\"extensionNumber\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExtensionNumber))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"fullPrice\":"
		out.RawString(prefix)
		(in.FullPrice).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"fullVWAP\":"
		out.RawString(prefix)
		out.String(string(in.FullVWAP))
	}
	{
		const prefix string = ",\"fundingReason\":"
		out.RawString(prefix)
		out.String(string(in.FundingReason))
	}
	{
		const prefix string = ",\"gainQuoteHomeConversionFactor\":"
		out.RawString(prefix)
		out.String(string(in.GainQuoteHomeConversionFactor))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"guaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"halfSpreadCost\":"
		out.RawString(prefix)
		out.String(string(in.HalfSpreadCost))
	}
	{
		const prefix string = ",\"homeConversionFactors\":"
		out.RawString(prefix)
		if in.HomeConversionFactors == nil {
			out.RawString("null")
		} else {
			(*in.HomeConversionFactors).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"homeCurrency\":"
		out.RawString(prefix)
		out.String(string(in.HomeCurrency))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"longPositionCloseout\":"
		out.RawString(prefix)
		if in.LongPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.LongPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lossQuoteHomeConversionFactor\":"
		out.RawString(prefix)
		out.String(string(in.LossQuoteHomeConversionFactor))
	}
	{
		const prefix string = ",\"marginCloseout\":"
		out.RawString(prefix)
		if in.MarginCloseout == nil {
			out.RawString("null")
		} else {
			(*in.MarginCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"openTradeDividendAdjustments\":"
		out.RawString(prefix)
		if in.OpenTradeDividendAdjustments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.OpenTradeDividendAdjustments {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"positionFinancings\":"
		out.RawString(prefix)
		if in.PositionFinancings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.PositionFinancings {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"quoteDividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.QuoteDividendAdjustment))
	}
	{
		const prefix string = ",\"quoteFinancing\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFinancing))
	}
	{
		const prefix string = ",\"quoteGuaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.QuoteGuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"quotePL\":"
		out.RawString(prefix)
		out.String(string(in.QuotePL))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"shortPositionCloseout\":"
		out.RawString(prefix)
		if in.ShortPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.ShortPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"siteID\":"
		out.RawString(prefix)
		out.Int64(int64(in.SiteID))
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensionsModify\":"
		out.RawString(prefix)
		if in.TradeClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClose\":"
		out.RawString(prefix)
		if in.TradeClose == nil {
			out.RawString("null")
		} else {
			(*in.TradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"tradeIDs\":"
		out.RawString(prefix)
		out.String(string(in.TradeIDs))
	}
	{
		const prefix string = ",\"tradeOpened\":"
		out.RawString(prefix)
		if in.TradeOpened == nil {
			out.RawString("null")
		} else {
			(*in.TradeOpened).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeReduced\":"
		out.RawString(prefix)
		if in.TradeReduced == nil {
			out.RawString("null")
		} else {
			(*in.TradeReduced).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeState\":"
		out.RawString(prefix)
		out.String(string(in.TradeState))
	}
	{
		const prefix string = ",\"tradesClosed\":"
		out.RawString(prefix)
		if in.TradesClosed == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.TradesClosed {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionParser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionParser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionParser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionParser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *Transaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in Transaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Transaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Transaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Transaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Transaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *TrailingStopLossOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TrailingStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in TrailingStopLossOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrailingStopLossOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrailingStopLossOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrailingStopLossOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrailingStopLossOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *TrailingStopLossOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TrailingStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in TrailingStopLossOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrailingStopLossOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrailingStopLossOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrailingStopLossOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrailingStopLossOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *TradeClientExtensionsModifyTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "tradeClientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModify = nil
			} else {
				if out.TradeClientExtensionsModify == nil {
					out.TradeClientExtensionsModify = new(ClientExtensions)
				}
				(*out.TradeClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in TradeClientExtensionsModifyTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"tradeClientExtensionsModify\":"
		out.RawString(prefix)
		if in.TradeClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsModifyTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsModifyTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsModifyTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsModifyTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel6(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *TradeClientExtensionsModifyRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "tradeClientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModify = nil
			} else {
				if out.TradeClientExtensionsModify == nil {
					out.TradeClientExtensionsModify = new(ClientExtensions)
				}
				(*out.TradeClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in TradeClientExtensionsModifyRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"tradeClientExtensionsModify\":"
		out.RawString(prefix)
		if in.TradeClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsModifyRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsModifyRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsModifyRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsModifyRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel7(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *TakeProfitOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TakeProfitOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in TakeProfitOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TakeProfitOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TakeProfitOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TakeProfitOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TakeProfitOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel8(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *TakeProfitOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TakeProfitOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in TakeProfitOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TakeProfitOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TakeProfitOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TakeProfitOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TakeProfitOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel9(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel10(in *jlexer.Lexer, out *StopOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = StopOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel10(out *jwriter.Writer, in StopOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel10(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel11(in *jlexer.Lexer, out *StopOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = StopOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel11(out *jwriter.Writer, in StopOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel11(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel12(in *jlexer.Lexer, out *StopLossOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "reason":
			out.Reason = StopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel12(out *jwriter.Writer, in StopLossOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopLossOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopLossOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopLossOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopLossOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel12(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel13(in *jlexer.Lexer, out *StopLossOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "reason":
			out.Reason = StopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel13(out *jwriter.Writer, in StopLossOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopLossOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopLossOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopLossOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopLossOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel13(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel14(in *jlexer.Lexer, out *ResetResettablePLTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel14(out *jwriter.Writer, in ResetResettablePLTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResetResettablePLTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResetResettablePLTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResetResettablePLTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResetResettablePLTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel14(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel15(in *jlexer.Lexer, out *ReopenTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel15(out *jwriter.Writer, in ReopenTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReopenTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReopenTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReopenTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReopenTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel15(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel16(in *jlexer.Lexer, out *OrderFillTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = ClientID(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "gainQuoteHomeConversionFactor":
			out.GainQuoteHomeConversionFactor = DecimalNumber(in.String())
		case "lossQuoteHomeConversionFactor":
			out.LossQuoteHomeConversionFactor = DecimalNumber(in.String())
		case "homeConversionFactors":
			if in.IsNull() {
				in.Skip()
				out.HomeConversionFactors = nil
			} else {
				if out.HomeConversionFactors == nil {
					out.HomeConversionFactors = new(HomeConversionFactors)
				}
				(*out.HomeConversionFactors).UnmarshalEasyJSON(in)
			}
		case "price":
			out.Price = PriceValue(in.String())
		case "fullVWAP":
			out.FullVWAP = PriceValue(in.String())
		case "fullPrice":
			(out.FullPrice).UnmarshalEasyJSON(in)
		case "reason":
			out.Reason = OrderFillReason(in.String())
		case "pl":
			out.Pl = AccountUnits(in.String())
		case "quotePL":
			out.QuotePL = DecimalNumber(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "baseFinancing":
			out.BaseFinancing = DecimalNumber(in.String())
		case "quoteFinancing":
			out.QuoteFinancing = DecimalNumber(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "guaranteedExecutionFee":
			out.GuaranteedExecutionFee = AccountUnits(in.String())
		case "quoteGuaranteedExecutionFee":
			out.QuoteGuaranteedExecutionFee = DecimalNumber(in.String())
		case "accountBalance":
			out.AccountBalance = AccountUnits(in.String())
		case "tradeOpened":
			if in.IsNull() {
				in.Skip()
				out.TradeOpened = nil
			} else {
				if out.TradeOpened == nil {
					out.TradeOpened = new(TradeOpen)
				}
				(*out.TradeOpened).UnmarshalEasyJSON(in)
			}
		case "tradesClosed":
			if in.IsNull() {
				in.Skip()
				out.TradesClosed = nil
			} else {
				in.Delim('[')
				if out.TradesClosed == nil {
					if !in.IsDelim(']') {
						out.TradesClosed = make([]*TradeReduce, 0, 8)
					} else {
						out.TradesClosed = []*TradeReduce{}
					}
				} else {
					out.TradesClosed = (out.TradesClosed)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *TradeReduce
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(TradeReduce)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.TradesClosed = append(out.TradesClosed, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradeReduced":
			if in.IsNull() {
				in.Skip()
				out.TradeReduced = nil
			} else {
				if out.TradeReduced == nil {
					out.TradeReduced = new(TradeReduce)
				}
				(*out.TradeReduced).UnmarshalEasyJSON(in)
			}
		case "halfSpreadCost":
			out.HalfSpreadCost = AccountUnits(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel16(out *jwriter.Writer, in OrderFillTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"gainQuoteHomeConversionFactor\":"
		out.RawString(prefix)
		out.String(string(in.GainQuoteHomeConversionFactor))
	}
	{
		const prefix string = ",\"lossQuoteHomeConversionFactor\":"
		out.RawString(prefix)
		out.String(string(in.LossQuoteHomeConversionFactor))
	}
	{
		const prefix string = ",\"homeConversionFactors\":"
		out.RawString(prefix)
		if in.HomeConversionFactors == nil {
			out.RawString("null")
		} else {
			(*in.HomeConversionFactors).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"fullVWAP\":"
		out.RawString(prefix)
		out.String(string(in.FullVWAP))
	}
	{
		const prefix string = ",\"fullPrice\":"
		out.RawString(prefix)
		(in.FullPrice).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"quotePL\":"
		out.RawString(prefix)
		out.String(string(in.QuotePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"baseFinancing\":"
		out.RawString(prefix)
		out.String(string(in.BaseFinancing))
	}
	{
		const prefix string = ",\"quoteFinancing\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFinancing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"guaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"quoteGuaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.QuoteGuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"accountBalance\":"
		out.RawString(prefix)
		out.String(string(in.AccountBalance))
	}
	{
		const prefix string = ",\"tradeOpened\":"
		out.RawString(prefix)
		if in.TradeOpened == nil {
			out.RawString("null")
		} else {
			(*in.TradeOpened).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradesClosed\":"
		out.RawString(prefix)
		if in.TradesClosed == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.TradesClosed {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tradeReduced\":"
		out.RawString(prefix)
		if in.TradeReduced == nil {
			out.RawString("null")
		} else {
			(*in.TradeReduced).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"halfSpreadCost\":"
		out.RawString(prefix)
		out.String(string(in.HalfSpreadCost))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderFillTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderFillTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderFillTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderFillTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel16(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel17(in *jlexer.Lexer, out *OrderClientExtensionsModifyTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = ClientID(in.String())
		case "clientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensionsModify = nil
			} else {
				if out.ClientExtensionsModify == nil {
					out.ClientExtensionsModify = new(ClientExtensions)
				}
				(*out.ClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModify = nil
			} else {
				if out.TradeClientExtensionsModify == nil {
					out.TradeClientExtensionsModify = new(ClientExtensions)
				}
				(*out.TradeClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel17(out *jwriter.Writer, in OrderClientExtensionsModifyTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"clientExtensionsModify\":"
		out.RawString(prefix)
		if in.ClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensionsModify\":"
		out.RawString(prefix)
		if in.TradeClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderClientExtensionsModifyTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderClientExtensionsModifyTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderClientExtensionsModifyTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderClientExtensionsModifyTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel17(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel18(in *jlexer.Lexer, out *OrderClientExtensionsModifyRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = ClientID(in.String())
		case "clientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensionsModify = nil
			} else {
				if out.ClientExtensionsModify == nil {
					out.ClientExtensionsModify = new(ClientExtensions)
				}
				(*out.ClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModify = nil
			} else {
				if out.TradeClientExtensionsModify == nil {
					out.TradeClientExtensionsModify = new(ClientExtensions)
				}
				(*out.TradeClientExtensionsModify).UnmarshalEasyJSON(in)
			}
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel18(out *jwriter.Writer, in OrderClientExtensionsModifyRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"clientExtensionsModify\":"
		out.RawString(prefix)
		if in.ClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensionsModify\":"
		out.RawString(prefix)
		if in.TradeClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensionsModify).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderClientExtensionsModifyRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderClientExtensionsModifyRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderClientExtensionsModifyRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderClientExtensionsModifyRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel18(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel19(in *jlexer.Lexer, out *OrderCancelTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = OrderID(in.String())
		case "reason":
			out.Reason = OrderCancelReason(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel19(out *jwriter.Writer, in OrderCancelTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderCancelTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderCancelTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderCancelTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderCancelTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel19(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel20(in *jlexer.Lexer, out *OrderCancelRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel20(out *jwriter.Writer, in OrderCancelRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderCancelRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderCancelRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderCancelRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderCancelRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel20(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel21(in *jlexer.Lexer, out *MarketOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "tradeClose":
			if in.IsNull() {
				in.Skip()
				out.TradeClose = nil
			} else {
				if out.TradeClose == nil {
					out.TradeClose = new(MarketOrderTradeClose)
				}
				(*out.TradeClose).UnmarshalEasyJSON(in)
			}
		case "longPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.LongPositionCloseout = nil
			} else {
				if out.LongPositionCloseout == nil {
					out.LongPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.LongPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "shortPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.ShortPositionCloseout = nil
			} else {
				if out.ShortPositionCloseout == nil {
					out.ShortPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.ShortPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "marginCloseout":
			if in.IsNull() {
				in.Skip()
				out.MarginCloseout = nil
			} else {
				if out.MarginCloseout == nil {
					out.MarginCloseout = new(MarketOrderMarginCloseout)
				}
				(*out.MarginCloseout).UnmarshalEasyJSON(in)
			}
		case "delayedTradeClose":
			if in.IsNull() {
				in.Skip()
				out.DelayedTradeClose = nil
			} else {
				if out.DelayedTradeClose == nil {
					out.DelayedTradeClose = new(MarketOrderDelayedTradeClose)
				}
				(*out.DelayedTradeClose).UnmarshalEasyJSON(in)
			}
		case "reason":
			out.Reason = MarketOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel21(out *jwriter.Writer, in MarketOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"tradeClose\":"
		out.RawString(prefix)
		if in.TradeClose == nil {
			out.RawString("null")
		} else {
			(*in.TradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"longPositionCloseout\":"
		out.RawString(prefix)
		if in.LongPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.LongPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"shortPositionCloseout\":"
		out.RawString(prefix)
		if in.ShortPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.ShortPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"marginCloseout\":"
		out.RawString(prefix)
		if in.MarginCloseout == nil {
			out.RawString("null")
		} else {
			(*in.MarginCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"delayedTradeClose\":"
		out.RawString(prefix)
		if in.DelayedTradeClose == nil {
			out.RawString("null")
		} else {
			(*in.DelayedTradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel21(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel22(in *jlexer.Lexer, out *MarketOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "tradeClose":
			if in.IsNull() {
				in.Skip()
				out.TradeClose = nil
			} else {
				if out.TradeClose == nil {
					out.TradeClose = new(MarketOrderTradeClose)
				}
				(*out.TradeClose).UnmarshalEasyJSON(in)
			}
		case "longPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.LongPositionCloseout = nil
			} else {
				if out.LongPositionCloseout == nil {
					out.LongPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.LongPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "shortPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.ShortPositionCloseout = nil
			} else {
				if out.ShortPositionCloseout == nil {
					out.ShortPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.ShortPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "marginCloseout":
			if in.IsNull() {
				in.Skip()
				out.MarginCloseout = nil
			} else {
				if out.MarginCloseout == nil {
					out.MarginCloseout = new(MarketOrderMarginCloseout)
				}
				(*out.MarginCloseout).UnmarshalEasyJSON(in)
			}
		case "delayedTradeClose":
			if in.IsNull() {
				in.Skip()
				out.DelayedTradeClose = nil
			} else {
				if out.DelayedTradeClose == nil {
					out.DelayedTradeClose = new(MarketOrderDelayedTradeClose)
				}
				(*out.DelayedTradeClose).UnmarshalEasyJSON(in)
			}
		case "reason":
			out.Reason = MarketOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel22(out *jwriter.Writer, in MarketOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"tradeClose\":"
		out.RawString(prefix)
		if in.TradeClose == nil {
			out.RawString("null")
		} else {
			(*in.TradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"longPositionCloseout\":"
		out.RawString(prefix)
		if in.LongPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.LongPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"shortPositionCloseout\":"
		out.RawString(prefix)
		if in.ShortPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.ShortPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"marginCloseout\":"
		out.RawString(prefix)
		if in.MarginCloseout == nil {
			out.RawString("null")
		} else {
			(*in.MarginCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"delayedTradeClose\":"
		out.RawString(prefix)
		if in.DelayedTradeClose == nil {
			out.RawString("null")
		} else {
			(*in.DelayedTradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel22(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel23(in *jlexer.Lexer, out *MarketIfTouchedOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = MarketIfTouchedOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel23(out *jwriter.Writer, in MarketIfTouchedOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketIfTouchedOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketIfTouchedOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketIfTouchedOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketIfTouchedOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel23(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel24(in *jlexer.Lexer, out *MarketIfTouchedOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = MarketIfTouchedOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel24(out *jwriter.Writer, in MarketIfTouchedOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketIfTouchedOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketIfTouchedOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketIfTouchedOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketIfTouchedOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel24(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel25(in *jlexer.Lexer, out *MarginCallExtendTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "extensionNumber":
			out.ExtensionNumber = int64(in.Int64())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel25(out *jwriter.Writer, in MarginCallExtendTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"extensionNumber\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExtensionNumber))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarginCallExtendTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginCallExtendTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarginCallExtendTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginCallExtendTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel25(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel26(in *jlexer.Lexer, out *MarginCallExitTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel26(out *jwriter.Writer, in MarginCallExitTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarginCallExitTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginCallExitTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarginCallExitTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginCallExitTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel26(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel27(in *jlexer.Lexer, out *MarginCallEnterTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel27(out *jwriter.Writer, in MarginCallEnterTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarginCallEnterTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginCallEnterTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarginCallEnterTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginCallEnterTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel27(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel28(in *jlexer.Lexer, out *LimitOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = LimitOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel28(out *jwriter.Writer, in LimitOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel28(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel29(in *jlexer.Lexer, out *LimitOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = LimitOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel29(out *jwriter.Writer, in LimitOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel29(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel30(in *jlexer.Lexer, out *GuaranteedStopLossOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "reason":
			out.Reason = GuaranteedStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel30(out *jwriter.Writer, in GuaranteedStopLossOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuaranteedStopLossOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuaranteedStopLossOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuaranteedStopLossOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuaranteedStopLossOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel30(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel31(in *jlexer.Lexer, out *GuaranteedStopLossOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = GuaranteedStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel31(out *jwriter.Writer, in GuaranteedStopLossOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuaranteedStopLossOrderRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuaranteedStopLossOrderRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuaranteedStopLossOrderRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuaranteedStopLossOrderRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel31(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel32(in *jlexer.Lexer, out *FixedPriceOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "tradeState":
			out.TradeState = string(in.String())
		case "reason":
			out.Reason = FixedPriceOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel32(out *jwriter.Writer, in FixedPriceOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"tradeState\":"
		out.RawString(prefix)
		out.String(string(in.TradeState))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FixedPriceOrderTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FixedPriceOrderTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FixedPriceOrderTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FixedPriceOrderTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel32(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel33(in *jlexer.Lexer, out *DividendAdjustmentTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "quoteDividendAdjustment":
			out.QuoteDividendAdjustment = DecimalNumber(in.String())
		case "homeConversionFactors":
			if in.IsNull() {
				in.Skip()
				out.HomeConversionFactors = nil
			} else {
				if out.HomeConversionFactors == nil {
					out.HomeConversionFactors = new(HomeConversionFactors)
				}
				(*out.HomeConversionFactors).UnmarshalEasyJSON(in)
			}
		case "accountBalance":
			out.AccountBalance = AccountUnits(in.String())
		case "openTradeDividendAdjustments":
			if in.IsNull() {
				in.Skip()
				out.OpenTradeDividendAdjustments = nil
			} else {
				in.Delim('[')
				if out.OpenTradeDividendAdjustments == nil {
					if !in.IsDelim(']') {
						out.OpenTradeDividendAdjustments = make([]*OpenTradeDividendAdjustment, 0, 8)
					} else {
						out.OpenTradeDividendAdjustments = []*OpenTradeDividendAdjustment{}
					}
				} else {
					out.OpenTradeDividendAdjustments = (out.OpenTradeDividendAdjustments)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *OpenTradeDividendAdjustment
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(OpenTradeDividendAdjustment)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.OpenTradeDividendAdjustments = append(out.OpenTradeDividendAdjustments, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel33(out *jwriter.Writer, in DividendAdjustmentTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"quoteDividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.QuoteDividendAdjustment))
	}
	{
		const prefix string = ",\"homeConversionFactors\":"
		out.RawString(prefix)
		if in.HomeConversionFactors == nil {
			out.RawString("null")
		} else {
			(*in.HomeConversionFactors).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"accountBalance\":"
		out.RawString(prefix)
		out.String(string(in.AccountBalance))
	}
	{
		const prefix string = ",\"openTradeDividendAdjustments\":"
		out.RawString(prefix)
		if in.OpenTradeDividendAdjustments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.OpenTradeDividendAdjustments {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DividendAdjustmentTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DividendAdjustmentTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DividendAdjustmentTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DividendAdjustmentTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel33(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel34(in *jlexer.Lexer, out *DelayedTradeClosureTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "reason":
			out.Reason = MarketOrderReason(in.String())
		case "tradeIDs":
			out.TradeIDs = TradeID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel34(out *jwriter.Writer, in DelayedTradeClosureTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"tradeIDs\":"
		out.RawString(prefix)
		out.String(string(in.TradeIDs))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelayedTradeClosureTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DelayedTradeClosureTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelayedTradeClosureTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DelayedTradeClosureTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel34(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel35(in *jlexer.Lexer, out *DailyFinancingTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "accountBalance":
			out.AccountBalance = AccountUnits(in.String())
		case "accountFinancingMode":
			out.AccountFinancingMode = AccountFinancingMode(in.String())
		case "positionFinancings":
			if in.IsNull() {
				in.Skip()
				out.PositionFinancings = nil
			} else {
				in.Delim('[')
				if out.PositionFinancings == nil {
					if !in.IsDelim(']') {
						out.PositionFinancings = make([]*PositionFinancing, 0, 8)
					} else {
						out.PositionFinancings = []*PositionFinancing{}
					}
				} else {
					out.PositionFinancings = (out.PositionFinancings)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *PositionFinancing
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(PositionFinancing)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.PositionFinancings = append(out.PositionFinancings, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel35(out *jwriter.Writer, in DailyFinancingTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"accountBalance\":"
		out.RawString(prefix)
		out.String(string(in.AccountBalance))
	}
	{
		const prefix string = ",\"accountFinancingMode\":"
		out.RawString(prefix)
		out.String(string(in.AccountFinancingMode))
	}
	{
		const prefix string = ",\"positionFinancings\":"
		out.RawString(prefix)
		if in.PositionFinancings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.PositionFinancings {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DailyFinancingTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DailyFinancingTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DailyFinancingTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DailyFinancingTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel35(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel36(in *jlexer.Lexer, out *CreateTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "divisionID":
			out.DivisionID = int64(in.Int64())
		case "siteID":
			out.SiteID = int64(in.Int64())
		case "accountUserID":
			out.AccountUserID = int64(in.Int64())
		case "accountNumber":
			out.AccountNumber = int64(in.Int64())
		case "homeCurrency":
			out.HomeCurrency = Currency(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel36(out *jwriter.Writer, in CreateTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"divisionID\":"
		out.RawString(prefix)
		out.Int64(int64(in.DivisionID))
	}
	{
		const prefix string = ",\"siteID\":"
		out.RawString(prefix)
		out.Int64(int64(in.SiteID))
	}
	{
		const prefix string = ",\"accountUserID\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountUserID))
	}
	{
		const prefix string = ",\"accountNumber\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountNumber))
	}
	{
		const prefix string = ",\"homeCurrency\":"
		out.RawString(prefix)
		out.String(string(in.HomeCurrency))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel36(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel37(in *jlexer.Lexer, out *CloseTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel37(out *jwriter.Writer, in CloseTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CloseTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CloseTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CloseTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CloseTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel37(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel38(in *jlexer.Lexer, out *ClientConfigureTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "alias":
			out.Alias = string(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel38(out *jwriter.Writer, in ClientConfigureTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientConfigureTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientConfigureTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientConfigureTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientConfigureTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel38(l, v)
}
func easyjson461f4b12DecodeGithubComKamaiuOandaGoModel39(in *jlexer.Lexer, out *ClientConfigureRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "alias":
			out.Alias = string(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeGithubComKamaiuOandaGoModel39(out *jwriter.Writer, in ClientConfigureRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientConfigureRejectTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientConfigureRejectTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeGithubComKamaiuOandaGoModel39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientConfigureRejectTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientConfigureRejectTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeGithubComKamaiuOandaGoModel39(l, v)
}
