// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *TransactionHeartbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in TransactionHeartbeat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionHeartbeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionHeartbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionHeartbeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionHeartbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *TrailingStopLossDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in TrailingStopLossDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix[1:])
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrailingStopLossDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrailingStopLossDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrailingStopLossDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrailingStopLossDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *TradeReduce) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "realizedPL":
			out.RealizedPL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "baseFinancing":
			out.BaseFinancing = DecimalNumber(in.String())
		case "quoteFinancing":
			out.QuoteFinancing = DecimalNumber(in.String())
		case "financingRate":
			out.FinancingRate = DecimalNumber(in.String())
		case "guaranteedExecutionFee":
			out.GuaranteedExecutionFee = AccountUnits(in.String())
		case "quoteGuaranteedExecutionFee":
			out.QuoteGuaranteedExecutionFee = DecimalNumber(in.String())
		case "halfSpreadCost":
			out.HalfSpreadCost = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in TradeReduce) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"realizedPL\":"
		out.RawString(prefix)
		out.String(string(in.RealizedPL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"baseFinancing\":"
		out.RawString(prefix)
		out.String(string(in.BaseFinancing))
	}
	{
		const prefix string = ",\"quoteFinancing\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFinancing))
	}
	{
		const prefix string = ",\"financingRate\":"
		out.RawString(prefix)
		out.String(string(in.FinancingRate))
	}
	{
		const prefix string = ",\"guaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"quoteGuaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.QuoteGuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"halfSpreadCost\":"
		out.RawString(prefix)
		out.String(string(in.HalfSpreadCost))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeReduce) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeReduce) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeReduce) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeReduce) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *TradeOpen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "guaranteedExecutionFee":
			out.GuaranteedExecutionFee = AccountUnits(in.String())
		case "quoteGuaranteedExecutionFee":
			out.QuoteGuaranteedExecutionFee = DecimalNumber(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "halfSpreadCost":
			out.HalfSpreadCost = AccountUnits(in.String())
		case "initialMarginRequired":
			out.InitialMarginRequired = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in TradeOpen) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"guaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"quoteGuaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.QuoteGuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"halfSpreadCost\":"
		out.RawString(prefix)
		out.String(string(in.HalfSpreadCost))
	}
	{
		const prefix string = ",\"initialMarginRequired\":"
		out.RawString(prefix)
		out.String(string(in.InitialMarginRequired))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeOpen) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeOpen) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeOpen) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeOpen) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *TakeProfitDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in TakeProfitDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TakeProfitDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TakeProfitDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TakeProfitDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TakeProfitDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *StopLossDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in StopLossDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopLossDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopLossDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopLossDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopLossDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *PositionFinancing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "baseFinancing":
			out.BaseFinancing = DecimalNumber(in.String())
		case "quoteFinancing":
			out.QuoteFinancing = DecimalNumber(in.String())
		case "homeConversionFactors":
			if in.IsNull() {
				in.Skip()
				out.HomeConversionFactors = nil
			} else {
				if out.HomeConversionFactors == nil {
					out.HomeConversionFactors = new(HomeConversionFactors)
				}
				(*out.HomeConversionFactors).UnmarshalEasyJSON(in)
			}
		case "openTradeFinancings":
			if in.IsNull() {
				in.Skip()
				out.OpenTradeFinancings = nil
			} else {
				in.Delim('[')
				if out.OpenTradeFinancings == nil {
					if !in.IsDelim(']') {
						out.OpenTradeFinancings = make([]*OpenTradeFinancing, 0, 8)
					} else {
						out.OpenTradeFinancings = []*OpenTradeFinancing{}
					}
				} else {
					out.OpenTradeFinancings = (out.OpenTradeFinancings)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *OpenTradeFinancing
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(OpenTradeFinancing)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.OpenTradeFinancings = append(out.OpenTradeFinancings, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "accountFinancingMode":
			out.AccountFinancingMode = AccountFinancingMode(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in PositionFinancing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"baseFinancing\":"
		out.RawString(prefix)
		out.String(string(in.BaseFinancing))
	}
	{
		const prefix string = ",\"quoteFinancing\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFinancing))
	}
	{
		const prefix string = ",\"homeConversionFactors\":"
		out.RawString(prefix)
		if in.HomeConversionFactors == nil {
			out.RawString("null")
		} else {
			(*in.HomeConversionFactors).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"openTradeFinancings\":"
		out.RawString(prefix)
		if in.OpenTradeFinancings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.OpenTradeFinancings {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"accountFinancingMode\":"
		out.RawString(prefix)
		out.String(string(in.AccountFinancingMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionFinancing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionFinancing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionFinancing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionFinancing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel6(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *OpenTradeFinancing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "baseFinancing":
			out.BaseFinancing = DecimalNumber(in.String())
		case "quoteFinancing":
			out.QuoteFinancing = DecimalNumber(in.String())
		case "financingRate":
			out.FinancingRate = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in OpenTradeFinancing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"baseFinancing\":"
		out.RawString(prefix)
		out.String(string(in.BaseFinancing))
	}
	{
		const prefix string = ",\"quoteFinancing\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFinancing))
	}
	{
		const prefix string = ",\"financingRate\":"
		out.RawString(prefix)
		out.String(string(in.FinancingRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenTradeFinancing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenTradeFinancing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenTradeFinancing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenTradeFinancing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel7(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *OpenTradeDividendAdjustment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeId":
			out.TradeID = TradeID(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "quoteDividendAdjustment":
			out.QuoteDividendAdjustment = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in OpenTradeDividendAdjustment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"quoteDividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.QuoteDividendAdjustment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenTradeDividendAdjustment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenTradeDividendAdjustment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenTradeDividendAdjustment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenTradeDividendAdjustment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel8(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *MarketOrderTradeClose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeId":
			out.TradeID = TradeID(in.String())
		case "clientTradeId":
			out.ClientTradeID = string(in.String())
		case "units":
			out.Units = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in MarketOrderTradeClose) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeId\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrderTradeClose) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrderTradeClose) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrderTradeClose) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrderTradeClose) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel9(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel10(in *jlexer.Lexer, out *MarketOrderPositionCloseout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel10(out *jwriter.Writer, in MarketOrderPositionCloseout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrderPositionCloseout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrderPositionCloseout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrderPositionCloseout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrderPositionCloseout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel10(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel11(in *jlexer.Lexer, out *MarketOrderMarginCloseout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			out.Reason = MarketOrderMarginCloseoutReason(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel11(out *jwriter.Writer, in MarketOrderMarginCloseout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrderMarginCloseout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrderMarginCloseout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrderMarginCloseout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrderMarginCloseout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel11(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel12(in *jlexer.Lexer, out *MarketOrderDelayedTradeClose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeId":
			out.TradeID = TradeID(in.String())
		case "clientTradeId":
			out.ClientTradeID = TradeID(in.String())
		case "sourceTransactionID":
			out.SourceTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel12(out *jwriter.Writer, in MarketOrderDelayedTradeClose) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeId\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"sourceTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.SourceTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrderDelayedTradeClose) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrderDelayedTradeClose) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrderDelayedTradeClose) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrderDelayedTradeClose) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel12(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel13(in *jlexer.Lexer, out *LiquidityRegenerationScheduleStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = DateTime(in.String())
		case "bidLiquidityUsed":
			out.BidLiquidityUsed = DecimalNumber(in.String())
		case "askLiquidityUsed":
			out.AskLiquidityUsed = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel13(out *jwriter.Writer, in LiquidityRegenerationScheduleStep) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"bidLiquidityUsed\":"
		out.RawString(prefix)
		out.String(string(in.BidLiquidityUsed))
	}
	{
		const prefix string = ",\"askLiquidityUsed\":"
		out.RawString(prefix)
		out.String(string(in.AskLiquidityUsed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LiquidityRegenerationScheduleStep) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LiquidityRegenerationScheduleStep) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LiquidityRegenerationScheduleStep) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LiquidityRegenerationScheduleStep) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel13(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel14(in *jlexer.Lexer, out *LiquidityRegenerationSchedule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "steps":
			if in.IsNull() {
				in.Skip()
				out.Steps = nil
			} else {
				in.Delim('[')
				if out.Steps == nil {
					if !in.IsDelim(']') {
						out.Steps = make([]*LiquidityRegenerationScheduleStep, 0, 8)
					} else {
						out.Steps = []*LiquidityRegenerationScheduleStep{}
					}
				} else {
					out.Steps = (out.Steps)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *LiquidityRegenerationScheduleStep
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(LiquidityRegenerationScheduleStep)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Steps = append(out.Steps, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel14(out *jwriter.Writer, in LiquidityRegenerationSchedule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"steps\":"
		out.RawString(prefix[1:])
		if in.Steps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Steps {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LiquidityRegenerationSchedule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LiquidityRegenerationSchedule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LiquidityRegenerationSchedule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LiquidityRegenerationSchedule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel14(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel15(in *jlexer.Lexer, out *GuaranteedStopLossDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel15(out *jwriter.Writer, in GuaranteedStopLossDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuaranteedStopLossDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuaranteedStopLossDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuaranteedStopLossDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuaranteedStopLossDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel15(l, v)
}
func easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel16(in *jlexer.Lexer, out *ClientExtensions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ClientID(in.String())
		case "tag":
			out.Tag = ClientTag(in.String())
		case "comment":
			out.Comment = ClientComment(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel16(out *jwriter.Writer, in ClientExtensions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientExtensions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientExtensions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8d34ef4EncodeGithubComKamaiuOandaGoModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientExtensions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientExtensions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8d34ef4DecodeGithubComKamaiuOandaGoModel16(l, v)
}
