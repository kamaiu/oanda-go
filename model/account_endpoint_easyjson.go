// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson73770c33DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *AccountConfigurationError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientConfigureRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.ClientConfigureRejectTransaction = nil
			} else {
				if out.ClientConfigureRejectTransaction == nil {
					out.ClientConfigureRejectTransaction = new(ClientConfigureRejectTransaction)
				}
				easyjson73770c33DecodeGithubComKamaiuOandaGoModel1(in, out.ClientConfigureRejectTransaction)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73770c33EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in AccountConfigurationError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientConfigureRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.ClientConfigureRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson73770c33EncodeGithubComKamaiuOandaGoModel1(out, *in.ClientConfigureRejectTransaction)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountConfigurationError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73770c33EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountConfigurationError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73770c33EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountConfigurationError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73770c33DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountConfigurationError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73770c33DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson73770c33DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *ClientConfigureRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "alias":
			out.Alias = string(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73770c33EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in ClientConfigureRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
