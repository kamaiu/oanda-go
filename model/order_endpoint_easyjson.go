// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *OrdersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orders":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]*Order, 0, 8)
					} else {
						out.Orders = []*Order{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Order
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Order)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Orders = append(out.Orders, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in OrdersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orders\":"
		out.RawString(prefix[1:])
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Orders {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrdersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrdersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrdersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrdersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *OrdersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.IDs = nil
			} else {
				in.Delim('[')
				if out.IDs == nil {
					if !in.IsDelim(']') {
						out.IDs = make([]OrderID, 0, 4)
					} else {
						out.IDs = []OrderID{}
					}
				} else {
					out.IDs = (out.IDs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 OrderID
					v4 = OrderID(in.String())
					out.IDs = append(out.IDs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			out.State = OrderStateFilter(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "count":
			out.Count = int(in.Int())
		case "beforeID":
			out.BeforeID = OrderID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in OrdersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.IDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.IDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"beforeID\":"
		out.RawString(prefix)
		out.String(string(in.BeforeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrdersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrdersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrdersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrdersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *OrderClientExtensionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderClientExtensionsModifyTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderClientExtensionsModifyTransaction = nil
			} else {
				if out.OrderClientExtensionsModifyTransaction == nil {
					out.OrderClientExtensionsModifyTransaction = new(OrderClientExtensionsModifyTransaction)
				}
				(*out.OrderClientExtensionsModifyTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TransactionID
					v7 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in OrderClientExtensionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderClientExtensionsModifyTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderClientExtensionsModifyTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderClientExtensionsModifyTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.RelatedTransactionIDs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderClientExtensionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderClientExtensionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderClientExtensionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderClientExtensionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *OrderClientExtensionsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in OrderClientExtensionsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix[1:])
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderClientExtensionsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderClientExtensionsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderClientExtensionsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderClientExtensionsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *OrderClientExtensionsError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderClientExtensionsModifyRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderClientExtensionsModifyRejectTransaction = nil
			} else {
				if out.OrderClientExtensionsModifyRejectTransaction == nil {
					out.OrderClientExtensionsModifyRejectTransaction = new(OrderClientExtensionsModifyRejectTransaction)
				}
				(*out.OrderClientExtensionsModifyRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 TransactionID
					v10 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in OrderClientExtensionsError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderClientExtensionsModifyRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderClientExtensionsModifyRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderClientExtensionsModifyRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.RelatedTransactionIDs {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderClientExtensionsError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderClientExtensionsError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderClientExtensionsError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderClientExtensionsError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *CreateOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderCreateTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCreateTransaction = nil
			} else {
				if out.OrderCreateTransaction == nil {
					out.OrderCreateTransaction = new(TransactionParser)
				}
				(*out.OrderCreateTransaction).UnmarshalEasyJSON(in)
			}
		case "orderFillTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderFillTransaction = nil
			} else {
				if out.OrderFillTransaction == nil {
					out.OrderFillTransaction = new(OrderFillTransaction)
				}
				(*out.OrderFillTransaction).UnmarshalEasyJSON(in)
			}
		case "orderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCancelTransaction = nil
			} else {
				if out.OrderCancelTransaction == nil {
					out.OrderCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.OrderCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "orderReissueTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderReissueTransaction = nil
			} else {
				if out.OrderReissueTransaction == nil {
					out.OrderReissueTransaction = new(TransactionParser)
				}
				(*out.OrderReissueTransaction).UnmarshalEasyJSON(in)
			}
		case "orderReissueRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderReissueRejectTransaction = nil
			} else {
				if out.OrderReissueRejectTransaction == nil {
					out.OrderReissueRejectTransaction = new(TransactionParser)
				}
				(*out.OrderReissueRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 TransactionID
					v13 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in CreateOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderCreateTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderCreateTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderCreateTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransaction\":"
		out.RawString(prefix)
		if in.OrderFillTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderFillTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderCancelTransaction\":"
		out.RawString(prefix)
		if in.OrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderReissueTransaction\":"
		out.RawString(prefix)
		if in.OrderReissueTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderReissueTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderReissueRejectTransaction\":"
		out.RawString(prefix)
		if in.OrderReissueRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderReissueRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.RelatedTransactionIDs {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *CreateOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			if in.IsNull() {
				in.Skip()
				out.Order = nil
			} else {
				if out.Order == nil {
					out.Order = new(OrderRequestParser)
				}
				(*out.Order).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in CreateOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		if in.Order == nil {
			out.RawString("null")
		} else {
			(*in.Order).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel6(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *CreateOrderError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderRejectTransaction = nil
			} else {
				if out.OrderRejectTransaction == nil {
					out.OrderRejectTransaction = new(TransactionParser)
				}
				(*out.OrderRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TransactionID
					v16 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in CreateOrderError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.RelatedTransactionIDs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel7(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *CancelOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCancelTransaction = nil
			} else {
				if out.OrderCancelTransaction == nil {
					out.OrderCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.OrderCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 TransactionID
					v19 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in CancelOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderCancelTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.RelatedTransactionIDs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel8(l, v)
}
func easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *CancelOrderError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCancelRejectTransaction = nil
			} else {
				if out.OrderCancelRejectTransaction == nil {
					out.OrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				(*out.OrderCancelRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v22 TransactionID
					v22 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in CancelOrderError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderCancelRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderCancelRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.RelatedTransactionIDs {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdf69d58EncodeGithubComKamaiuOandaGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdf69d58DecodeGithubComKamaiuOandaGoModel9(l, v)
}
