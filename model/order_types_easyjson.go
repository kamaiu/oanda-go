// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *UnitsAvailableDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "long":
			out.Long = DecimalNumber(in.String())
		case "short":
			out.Short = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in UnitsAvailableDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"long\":"
		out.RawString(prefix[1:])
		out.String(string(in.Long))
	}
	{
		const prefix string = ",\"short\":"
		out.RawString(prefix)
		out.String(string(in.Short))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnitsAvailableDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnitsAvailableDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnitsAvailableDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnitsAvailableDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *UnitsAvailable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default":
			if in.IsNull() {
				in.Skip()
				out.Default = nil
			} else {
				if out.Default == nil {
					out.Default = new(UnitsAvailableDetails)
				}
				(*out.Default).UnmarshalEasyJSON(in)
			}
		case "reduceFirst":
			if in.IsNull() {
				in.Skip()
				out.ReduceFirst = nil
			} else {
				if out.ReduceFirst == nil {
					out.ReduceFirst = new(UnitsAvailableDetails)
				}
				(*out.ReduceFirst).UnmarshalEasyJSON(in)
			}
		case "reduceOnly":
			if in.IsNull() {
				in.Skip()
				out.ReduceOnly = nil
			} else {
				if out.ReduceOnly == nil {
					out.ReduceOnly = new(UnitsAvailableDetails)
				}
				(*out.ReduceOnly).UnmarshalEasyJSON(in)
			}
		case "openOnly":
			if in.IsNull() {
				in.Skip()
				out.OpenOnly = nil
			} else {
				if out.OpenOnly == nil {
					out.OpenOnly = new(UnitsAvailableDetails)
				}
				(*out.OpenOnly).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in UnitsAvailable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"default\":"
		out.RawString(prefix[1:])
		if in.Default == nil {
			out.RawString("null")
		} else {
			(*in.Default).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reduceFirst\":"
		out.RawString(prefix)
		if in.ReduceFirst == nil {
			out.RawString("null")
		} else {
			(*in.ReduceFirst).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		if in.ReduceOnly == nil {
			out.RawString("null")
		} else {
			(*in.ReduceOnly).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"openOnly\":"
		out.RawString(prefix)
		if in.OpenOnly == nil {
			out.RawString("null")
		} else {
			(*in.OpenOnly).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnitsAvailable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnitsAvailable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnitsAvailable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnitsAvailable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *OrderIdentifier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = ClientID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in OrderIdentifier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderIdentifier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderIdentifier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderIdentifier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderIdentifier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *GuaranteedStopLossOrderEntryData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minimumDistance":
			out.MinimumDistance = DecimalNumber(in.String())
		case "premium":
			out.Premium = DecimalNumber(in.String())
		case "levelRestriction":
			easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel4(in, &out.LevelRestriction)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in GuaranteedStopLossOrderEntryData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"minimumDistance\":"
		out.RawString(prefix[1:])
		out.String(string(in.MinimumDistance))
	}
	{
		const prefix string = ",\"premium\":"
		out.RawString(prefix)
		out.String(string(in.Premium))
	}
	{
		const prefix string = ",\"levelRestriction\":"
		out.RawString(prefix)
		easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel4(out, in.LevelRestriction)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuaranteedStopLossOrderEntryData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuaranteedStopLossOrderEntryData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuaranteedStopLossOrderEntryData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuaranteedStopLossOrderEntryData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *GuaranteedStopLossOrderLevelRestriction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volume":
			out.Volume = DecimalNumber(in.String())
		case "priceRange":
			out.PriceRange = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in GuaranteedStopLossOrderLevelRestriction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix[1:])
		out.String(string(in.Volume))
	}
	{
		const prefix string = ",\"priceRange\":"
		out.RawString(prefix)
		out.String(string(in.PriceRange))
	}
	out.RawByte('}')
}
func easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *DynamicOrderState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = OrderID(in.String())
		case "trailingStopValue":
			out.TrailingStopValue = PriceValue(in.String())
		case "triggerDistance":
			out.TriggerDistance = PriceValue(in.String())
		case "isTriggerDistanceExact":
			out.IsTriggerDistanceExact = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in DynamicOrderState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"trailingStopValue\":"
		out.RawString(prefix)
		out.String(string(in.TrailingStopValue))
	}
	{
		const prefix string = ",\"triggerDistance\":"
		out.RawString(prefix)
		out.String(string(in.TriggerDistance))
	}
	{
		const prefix string = ",\"isTriggerDistanceExact\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTriggerDistanceExact))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DynamicOrderState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DynamicOrderState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEb9252a4EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DynamicOrderState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DynamicOrderState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEb9252a4DecodeGithubComKamaiuOandaGoModel5(l, v)
}
