// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE5673179DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *PositionBookResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "positionBook":
			if in.IsNull() {
				in.Skip()
				out.PositionBook = nil
			} else {
				if out.PositionBook == nil {
					out.PositionBook = new(PositionBook)
				}
				(*out.PositionBook).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5673179EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in PositionBookResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"positionBook\":"
		out.RawString(prefix[1:])
		if in.PositionBook == nil {
			out.RawString("null")
		} else {
			(*in.PositionBook).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionBookResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE5673179EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionBookResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5673179EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionBookResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE5673179DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionBookResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5673179DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonE5673179DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *OrderBookResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderBook":
			if in.IsNull() {
				in.Skip()
				out.OrderBook = nil
			} else {
				if out.OrderBook == nil {
					out.OrderBook = new(OrderBook)
				}
				(*out.OrderBook).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5673179EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in OrderBookResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderBook\":"
		out.RawString(prefix[1:])
		if in.OrderBook == nil {
			out.RawString("null")
		} else {
			(*in.OrderBook).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderBookResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE5673179EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderBookResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5673179EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderBookResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE5673179DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderBookResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5673179DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonE5673179DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *InstrumentCandlesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "price":
			out.Price = PricingComponent(in.String())
		case "granularity":
			out.Granularity = CandlestickGranularity(in.String())
		case "count":
			out.Count = int(in.Int())
		case "from":
			out.From = DateTime(in.String())
		case "to":
			out.To = DateTime(in.String())
		case "smooth":
			out.Smooth = bool(in.Bool())
		case "includeFirst":
			out.IncludeFirst = bool(in.Bool())
		case "dailyAlignment":
			out.DailyAlignment = int(in.Int())
		case "alignmentTimezone":
			out.AlignmentTimezone = string(in.String())
		case "weeklyAlignment":
			out.WeeklyAlignment = WeeklyAlignment(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5673179EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in InstrumentCandlesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"granularity\":"
		out.RawString(prefix)
		out.String(string(in.Granularity))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"smooth\":"
		out.RawString(prefix)
		out.Bool(bool(in.Smooth))
	}
	{
		const prefix string = ",\"includeFirst\":"
		out.RawString(prefix)
		out.Bool(bool(in.IncludeFirst))
	}
	{
		const prefix string = ",\"dailyAlignment\":"
		out.RawString(prefix)
		out.Int(int(in.DailyAlignment))
	}
	{
		const prefix string = ",\"alignmentTimezone\":"
		out.RawString(prefix)
		out.String(string(in.AlignmentTimezone))
	}
	{
		const prefix string = ",\"weeklyAlignment\":"
		out.RawString(prefix)
		out.String(string(in.WeeklyAlignment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstrumentCandlesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE5673179EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstrumentCandlesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5673179EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstrumentCandlesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE5673179DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstrumentCandlesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5673179DecodeGithubComKamaiuOandaGoModel2(l, v)
}
