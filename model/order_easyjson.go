// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *TrailingStopLossOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "trailingStopValue":
			out.TrailingStopValue = PriceValue(in.String())
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TradeID
					v1 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in TrailingStopLossOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"trailingStopValue\":"
		out.RawString(prefix)
		out.String(string(in.TrailingStopValue))
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TradeClosedIDs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrailingStopLossOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrailingStopLossOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrailingStopLossOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrailingStopLossOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *TakeProfitOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TradeID
					v4 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in TakeProfitOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.TradeClosedIDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TakeProfitOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TakeProfitOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TakeProfitOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TakeProfitOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *StopOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TradeID
					v7 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in StopOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.TradeClosedIDs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *StopLossOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 TradeID
					v10 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in StopLossOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.TradeClosedIDs {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopLossOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopLossOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopLossOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopLossOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *OrderParser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = string(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		case "clientTradeID":
			out.ClientTradeID = string(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "delayedTradeClose":
			if in.IsNull() {
				in.Skip()
				out.DelayedTradeClose = nil
			} else {
				if out.DelayedTradeClose == nil {
					out.DelayedTradeClose = new(MarketOrderDelayedTradeClose)
				}
				(*out.DelayedTradeClose).UnmarshalEasyJSON(in)
			}
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "fillingTransactionID":
			out.FillingTransactionID = string(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "initialMarketPrice":
			out.InitialMarketPrice = PriceValue(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "longPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.LongPositionCloseout = nil
			} else {
				if out.LongPositionCloseout == nil {
					out.LongPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.LongPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "marginCloseout":
			if in.IsNull() {
				in.Skip()
				out.MarginCloseout = nil
			} else {
				if out.MarginCloseout == nil {
					out.MarginCloseout = new(MarketOrderMarginCloseout)
				}
				(*out.MarginCloseout).UnmarshalEasyJSON(in)
			}
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = string(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = string(in.String())
		case "shortPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.ShortPositionCloseout = nil
			} else {
				if out.ShortPositionCloseout == nil {
					out.ShortPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.ShortPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "state":
			out.State = OrderState(in.String())
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "tradeClose":
			if in.IsNull() {
				in.Skip()
				out.TradeClose = nil
			} else {
				if out.TradeClose == nil {
					out.TradeClose = new(MarketOrderTradeClose)
				}
				(*out.TradeClose).UnmarshalEasyJSON(in)
			}
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 TradeID
					v13 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradeID":
			out.TradeID = string(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = string(in.String())
		case "tradeReducedID":
			out.TradeReducedID = string(in.String())
		case "tradeState":
			out.TradeState = string(in.String())
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopValue":
			out.TrailingStopValue = PriceValue(in.String())
		case "triggerCondition":
			out.TriggerCondition = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in OrderParser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix[1:])
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"delayedTradeClose\":"
		out.RawString(prefix)
		if in.DelayedTradeClose == nil {
			out.RawString("null")
		} else {
			(*in.DelayedTradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"initialMarketPrice\":"
		out.RawString(prefix)
		out.String(string(in.InitialMarketPrice))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"longPositionCloseout\":"
		out.RawString(prefix)
		if in.LongPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.LongPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"marginCloseout\":"
		out.RawString(prefix)
		if in.MarginCloseout == nil {
			out.RawString("null")
		} else {
			(*in.MarginCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"shortPositionCloseout\":"
		out.RawString(prefix)
		if in.ShortPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.ShortPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClose\":"
		out.RawString(prefix)
		if in.TradeClose == nil {
			out.RawString("null")
		} else {
			(*in.TradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.TradeClosedIDs {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeState\":"
		out.RawString(prefix)
		out.String(string(in.TradeState))
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopValue\":"
		out.RawString(prefix)
		out.String(string(in.TrailingStopValue))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderParser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderParser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderParser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderParser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *MarketOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "tradeClose":
			if in.IsNull() {
				in.Skip()
				out.TradeClose = nil
			} else {
				if out.TradeClose == nil {
					out.TradeClose = new(MarketOrderTradeClose)
				}
				(*out.TradeClose).UnmarshalEasyJSON(in)
			}
		case "longPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.LongPositionCloseout = nil
			} else {
				if out.LongPositionCloseout == nil {
					out.LongPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.LongPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "shortPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.ShortPositionCloseout = nil
			} else {
				if out.ShortPositionCloseout == nil {
					out.ShortPositionCloseout = new(MarketOrderPositionCloseout)
				}
				(*out.ShortPositionCloseout).UnmarshalEasyJSON(in)
			}
		case "marginCloseout":
			if in.IsNull() {
				in.Skip()
				out.MarginCloseout = nil
			} else {
				if out.MarginCloseout == nil {
					out.MarginCloseout = new(MarketOrderMarginCloseout)
				}
				(*out.MarginCloseout).UnmarshalEasyJSON(in)
			}
		case "delayedTradeClose":
			if in.IsNull() {
				in.Skip()
				out.DelayedTradeClose = nil
			} else {
				if out.DelayedTradeClose == nil {
					out.DelayedTradeClose = new(MarketOrderDelayedTradeClose)
				}
				(*out.DelayedTradeClose).UnmarshalEasyJSON(in)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TradeID
					v16 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in MarketOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"tradeClose\":"
		out.RawString(prefix)
		if in.TradeClose == nil {
			out.RawString("null")
		} else {
			(*in.TradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"longPositionCloseout\":"
		out.RawString(prefix)
		if in.LongPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.LongPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"shortPositionCloseout\":"
		out.RawString(prefix)
		if in.ShortPositionCloseout == nil {
			out.RawString("null")
		} else {
			(*in.ShortPositionCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"marginCloseout\":"
		out.RawString(prefix)
		if in.MarginCloseout == nil {
			out.RawString("null")
		} else {
			(*in.MarginCloseout).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"delayedTradeClose\":"
		out.RawString(prefix)
		if in.DelayedTradeClose == nil {
			out.RawString("null")
		} else {
			(*in.DelayedTradeClose).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.TradeClosedIDs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel6(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *MarketIfTouchedOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "initialMarketPrice":
			out.InitialMarketPrice = PriceValue(in.String())
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 TradeID
					v19 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in MarketIfTouchedOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"initialMarketPrice\":"
		out.RawString(prefix)
		out.String(string(in.InitialMarketPrice))
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.TradeClosedIDs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketIfTouchedOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketIfTouchedOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketIfTouchedOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketIfTouchedOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel7(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *LimitOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v22 TradeID
					v22 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in LimitOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.TradeClosedIDs {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel8(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *GuaranteedStopLossOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 TradeID
					v25 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in GuaranteedStopLossOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.TradeClosedIDs {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuaranteedStopLossOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuaranteedStopLossOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuaranteedStopLossOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuaranteedStopLossOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel9(l, v)
}
func easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel10(in *jlexer.Lexer, out *FixedPriceOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = OrderType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "tradeState":
			out.TradeState = string(in.String())
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				(*out.TakeProfitOnFill).UnmarshalEasyJSON(in)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				(*out.StopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLossOnFill).UnmarshalEasyJSON(in)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				(*out.TradeClientExtensions).UnmarshalEasyJSON(in)
			}
		case "fillingTransactionID":
			out.FillingTransactionID = TransactionID(in.String())
		case "filledTime":
			out.FilledTime = DateTime(in.String())
		case "tradeOpenedID":
			out.TradeOpenedID = TradeID(in.String())
		case "tradeReducedID":
			out.TradeReducedID = TradeID(in.String())
		case "tradeClosedIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeClosedIDs = nil
			} else {
				in.Delim('[')
				if out.TradeClosedIDs == nil {
					if !in.IsDelim(']') {
						out.TradeClosedIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeClosedIDs = []TradeID{}
					}
				} else {
					out.TradeClosedIDs = (out.TradeClosedIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v28 TradeID
					v28 = TradeID(in.String())
					out.TradeClosedIDs = append(out.TradeClosedIDs, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "cancelledTime":
			out.CancelledTime = DateTime(in.String())
		case "id":
			out.Id = OrderID(in.String())
		case "createTime":
			out.CreateTime = DateTime(in.String())
		case "state":
			out.State = OrderState(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel10(out *jwriter.Writer, in FixedPriceOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"tradeState\":"
		out.RawString(prefix)
		out.String(string(in.TradeState))
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOnFill).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fillingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.FillingTransactionID))
	}
	{
		const prefix string = ",\"filledTime\":"
		out.RawString(prefix)
		out.String(string(in.FilledTime))
	}
	{
		const prefix string = ",\"tradeOpenedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeOpenedID))
	}
	{
		const prefix string = ",\"tradeReducedID\":"
		out.RawString(prefix)
		out.String(string(in.TradeReducedID))
	}
	{
		const prefix string = ",\"tradeClosedIDs\":"
		out.RawString(prefix)
		if in.TradeClosedIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.TradeClosedIDs {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"cancelledTime\":"
		out.RawString(prefix)
		out.String(string(in.CancelledTime))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"createTime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FixedPriceOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FixedPriceOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson120d1ca2EncodeGithubComKamaiuOandaGoModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FixedPriceOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FixedPriceOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson120d1ca2DecodeGithubComKamaiuOandaGoModel10(l, v)
}
