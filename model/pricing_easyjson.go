// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *QuoteHomeConversionFactors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "positiveUnits":
			out.PositiveUnits = DecimalNumber(in.String())
		case "negativeUnits":
			out.NegativeUnits = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in QuoteHomeConversionFactors) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"positiveUnits\":"
		out.RawString(prefix[1:])
		out.String(string(in.PositiveUnits))
	}
	{
		const prefix string = ",\"negativeUnits\":"
		out.RawString(prefix)
		out.String(string(in.NegativeUnits))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuoteHomeConversionFactors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuoteHomeConversionFactors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuoteHomeConversionFactors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuoteHomeConversionFactors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *PriceBucket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "liquidity":
			out.Liquidity = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in PriceBucket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"liquidity\":"
		out.RawString(prefix)
		out.Int64(int64(in.Liquidity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceBucket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceBucket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceBucket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceBucket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *HomeConversions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = Currency(in.String())
		case "accountGain":
			out.AccountGain = DecimalNumber(in.String())
		case "accountLoss":
			out.AccountLoss = DecimalNumber(in.String())
		case "positionValue":
			out.PositionValue = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in HomeConversions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix[1:])
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"accountGain\":"
		out.RawString(prefix)
		out.String(string(in.AccountGain))
	}
	{
		const prefix string = ",\"accountLoss\":"
		out.RawString(prefix)
		out.String(string(in.AccountLoss))
	}
	{
		const prefix string = ",\"positionValue\":"
		out.RawString(prefix)
		out.String(string(in.PositionValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HomeConversions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HomeConversions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HomeConversions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HomeConversions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *Heartbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "time":
			out.Time = DateTime(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in Heartbeat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Heartbeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Heartbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Heartbeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Heartbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *ClientPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "tradeable":
			out.Tradeable = bool(in.Bool())
		case "bids":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([]PriceBucket, 0, 2)
					} else {
						out.Bids = []PriceBucket{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PriceBucket
					(v1).UnmarshalEasyJSON(in)
					out.Bids = append(out.Bids, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "asks":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([]PriceBucket, 0, 2)
					} else {
						out.Asks = []PriceBucket{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v2 PriceBucket
					(v2).UnmarshalEasyJSON(in)
					out.Asks = append(out.Asks, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "closeoutBid":
			out.CloseoutBid = PriceValue(in.String())
		case "closeoutAsk":
			out.CloseoutAsk = PriceValue(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in ClientPrice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"tradeable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tradeable))
	}
	{
		const prefix string = ",\"bids\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Bids {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"asks\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Asks {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"closeoutBid\":"
		out.RawString(prefix)
		out.String(string(in.CloseoutBid))
	}
	{
		const prefix string = ",\"closeoutAsk\":"
		out.RawString(prefix)
		out.String(string(in.CloseoutAsk))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientPrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientPrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f04e93cEncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientPrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientPrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f04e93cDecodeGithubComKamaiuOandaGoModel4(l, v)
}
