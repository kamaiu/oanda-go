Transaction	The base Transaction specification. Specifies properties that are common between all Transaction.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID)
}

CreateTransaction	A CreateTransaction represents the creation of an Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “CREATE” in a
    # CreateTransaction.
    #
    type : (TransactionType, default=CREATE),

    #
    # The ID of the Division that the Account is in
    #
    divisionID : (integer),

    #
    # The ID of the Site that the Account was created at
    #
    siteID : (integer),

    #
    # The ID of the user that the Account was created for
    #
    accountUserID : (integer),

    #
    # The number of the Account within the site/division/user
    #
    accountNumber : (integer),

    #
    # The home currency of the Account
    #
    homeCurrency : (Currency)
}

CloseTransaction	A CloseTransaction represents the closing of an Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “CLOSE” in a CloseTransaction.
    #
    type : (TransactionType, default=CLOSE)
}

ReopenTransaction	A ReopenTransaction represents the re-opening of a closed Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “REOPEN” in a
    # ReopenTransaction.
    #
    type : (TransactionType, default=REOPEN)
}

ClientConfigureTransaction	A ClientConfigureTransaction represents the configuration of an Account by a client.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “CLIENT_CONFIGURE” in a
    # ClientConfigureTransaction.
    #
    type : (TransactionType, default=CLIENT_CONFIGURE),

    #
    # The client-provided alias for the Account.
    #
    alias : (string),

    #
    # The margin rate override for the Account.
    #
    marginRate : (DecimalNumber)
}

ClientConfigureRejectTransaction	A ClientConfigureRejectTransaction represents the reject of configuration of an Account by a client.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “CLIENT_CONFIGURE_REJECT” in a
    # ClientConfigureRejectTransaction.
    #
    type : (TransactionType, default=CLIENT_CONFIGURE_REJECT),

    #
    # The client-provided alias for the Account.
    #
    alias : (string),

    #
    # The margin rate override for the Account.
    #
    marginRate : (DecimalNumber),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

TransferFundsTransaction	A TransferFundsTransaction represents the transfer of funds in/out of an Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “TRANSFER_FUNDS” in a
    # TransferFundsTransaction.
    #
    type : (TransactionType, default=TRANSFER_FUNDS),

    #
    # The amount to deposit/withdraw from the Account in the Account’s home
    # currency. A positive value indicates a deposit, a negative value
    # indicates a withdrawal.
    #
    amount : (AccountUnits),

    #
    # The reason that an Account is being funded.
    #
    fundingReason : (FundingReason),

    #
    # An optional comment that may be attached to a fund transfer for audit
    # purposes
    #
    comment : (string),

    #
    # The Account’s balance after funds are transferred.
    #
    accountBalance : (AccountUnits)
}

TransferFundsRejectTransaction	A TransferFundsRejectTransaction represents the rejection of the transfer of funds in/out of an Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “TRANSFER_FUNDS_REJECT” in a
    # TransferFundsRejectTransaction.
    #
    type : (TransactionType, default=TRANSFER_FUNDS_REJECT),

    #
    # The amount to deposit/withdraw from the Account in the Account’s home
    # currency. A positive value indicates a deposit, a negative value
    # indicates a withdrawal.
    #
    amount : (AccountUnits),

    #
    # The reason that an Account is being funded.
    #
    fundingReason : (FundingReason),

    #
    # An optional comment that may be attached to a fund transfer for audit
    # purposes
    #
    comment : (string),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

MarketOrderTransaction	A MarketOrderTransaction represents the creation of a Market Order in the user’s account. A Market Order is an Order that is filled immediately at the current market price. Market Orders can be specialized when they are created to accomplish a specific task: to close a Trade, to closeout a Position or to participate in in a Margin closeout.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “MARKET_ORDER” in a
    # MarketOrderTransaction.
    #
    type : (TransactionType, default=MARKET_ORDER),

    #
    # The Market Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the Market Order. A positive
    # number of units results in a long Order, and a negative number of units
    # results in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The time-in-force requested for the Market Order. Restricted to FOK or
    # IOC for a MarketOrder.
    #
    timeInForce : (TimeInForce, required, default=FOK),

    #
    # The worst price that the client is willing to have the Market Order
    # filled at.
    #
    priceBound : (PriceValue),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Details of the Trade requested to be closed, only provided when the
    # Market Order is being used to explicitly close a Trade.
    #
    tradeClose : (MarketOrderTradeClose),

    #
    # Details of the long Position requested to be closed out, only provided
    # when a Market Order is being used to explicitly closeout a long Position.
    #
    longPositionCloseout : (MarketOrderPositionCloseout),

    #
    # Details of the short Position requested to be closed out, only provided
    # when a Market Order is being used to explicitly closeout a short
    # Position.
    #
    shortPositionCloseout : (MarketOrderPositionCloseout),

    #
    # Details of the Margin Closeout that this Market Order was created for
    #
    marginCloseout : (MarketOrderMarginCloseout),

    #
    # Details of the delayed Trade close that this Market Order was created for
    #
    delayedTradeClose : (MarketOrderDelayedTradeClose),

    #
    # The reason that the Market Order was created
    #
    reason : (MarketOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions)
}

MarketOrderRejectTransaction	A MarketOrderRejectTransaction represents the rejection of the creation of a Market Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “MARKET_ORDER_REJECT” in a
    # MarketOrderRejectTransaction.
    #
    type : (TransactionType, default=MARKET_ORDER_REJECT),

    #
    # The Market Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the Market Order. A positive
    # number of units results in a long Order, and a negative number of units
    # results in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The time-in-force requested for the Market Order. Restricted to FOK or
    # IOC for a MarketOrder.
    #
    timeInForce : (TimeInForce, required, default=FOK),

    #
    # The worst price that the client is willing to have the Market Order
    # filled at.
    #
    priceBound : (PriceValue),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Details of the Trade requested to be closed, only provided when the
    # Market Order is being used to explicitly close a Trade.
    #
    tradeClose : (MarketOrderTradeClose),

    #
    # Details of the long Position requested to be closed out, only provided
    # when a Market Order is being used to explicitly closeout a long Position.
    #
    longPositionCloseout : (MarketOrderPositionCloseout),

    #
    # Details of the short Position requested to be closed out, only provided
    # when a Market Order is being used to explicitly closeout a short
    # Position.
    #
    shortPositionCloseout : (MarketOrderPositionCloseout),

    #
    # Details of the Margin Closeout that this Market Order was created for
    #
    marginCloseout : (MarketOrderMarginCloseout),

    #
    # Details of the delayed Trade close that this Market Order was created for
    #
    delayedTradeClose : (MarketOrderDelayedTradeClose),

    #
    # The reason that the Market Order was created
    #
    reason : (MarketOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

FixedPriceOrderTransaction	A FixedPriceOrderTransaction represents the creation of a Fixed Price Order in the user’s account. A Fixed Price Order is an Order that is filled immediately at a specified price.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “FIXED_PRICE_ORDER” in a
    # FixedPriceOrderTransaction.
    #
    type : (TransactionType, default=FIXED_PRICE_ORDER),

    #
    # The Fixed Price Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the Fixed Price Order. A positive
    # number of units results in a long Order, and a negative number of units
    # results in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The price specified for the Fixed Price Order. This price is the exact
    # price that the Fixed Price Order will be filled at.
    #
    price : (PriceValue, required),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # The state that the trade resulting from the Fixed Price Order should be
    # set to.
    #
    tradeState : (string, required),

    #
    # The reason that the Fixed Price Order was created
    #
    reason : (FixedPriceOrderReason),

    #
    # The client extensions for the Fixed Price Order.
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions)
}

LimitOrderTransaction	A LimitOrderTransaction represents the creation of a Limit Order in the user’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “LIMIT_ORDER” in a
    # LimitOrderTransaction.
    #
    type : (TransactionType, default=LIMIT_ORDER),

    #
    # The Limit Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the Limit Order. A positive number
    # of units results in a long Order, and a negative number of units results
    # in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The price threshold specified for the Limit Order. The Limit Order will
    # only be filled by a market price that is equal to or better than this
    # price.
    #
    price : (PriceValue, required),

    #
    # The time-in-force requested for the Limit Order.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the Limit Order will be cancelled if its timeInForce
    # is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Limit Order was initiated
    #
    reason : (LimitOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions),

    #
    # The ID of the Order that this Order replaces (only provided if this Order
    # replaces an existing Order).
    #
    replacesOrderID : (OrderID),

    #
    # The ID of the Transaction that cancels the replaced Order (only provided
    # if this Order replaces an existing Order).
    #
    cancellingTransactionID : (TransactionID)
}

LimitOrderRejectTransaction	A LimitOrderRejectTransaction represents the rejection of the creation of a Limit Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “LIMIT_ORDER_REJECT” in a
    # LimitOrderRejectTransaction.
    #
    type : (TransactionType, default=LIMIT_ORDER_REJECT),

    #
    # The Limit Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the Limit Order. A positive number
    # of units results in a long Order, and a negative number of units results
    # in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The price threshold specified for the Limit Order. The Limit Order will
    # only be filled by a market price that is equal to or better than this
    # price.
    #
    price : (PriceValue, required),

    #
    # The time-in-force requested for the Limit Order.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the Limit Order will be cancelled if its timeInForce
    # is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Limit Order was initiated
    #
    reason : (LimitOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions),

    #
    # The ID of the Order that this Order was intended to replace (only
    # provided if this Order was intended to replace an existing Order).
    #
    intendedReplacesOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

StopOrderTransaction	A StopOrderTransaction represents the creation of a Stop Order in the user’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “STOP_ORDER” in a
    # StopOrderTransaction.
    #
    type : (TransactionType, default=STOP_ORDER),

    #
    # The Stop Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the Stop Order. A positive number
    # of units results in a long Order, and a negative number of units results
    # in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The price threshold specified for the Stop Order. The Stop Order will
    # only be filled by a market price that is equal to or worse than this
    # price.
    #
    price : (PriceValue, required),

    #
    # The worst market price that may be used to fill this Stop Order. If the
    # market gaps and crosses through both the price and the priceBound, the
    # Stop Order will be cancelled instead of being filled.
    #
    priceBound : (PriceValue),

    #
    # The time-in-force requested for the Stop Order.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the Stop Order will be cancelled if its timeInForce is
    # “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Stop Order was initiated
    #
    reason : (StopOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions),

    #
    # The ID of the Order that this Order replaces (only provided if this Order
    # replaces an existing Order).
    #
    replacesOrderID : (OrderID),

    #
    # The ID of the Transaction that cancels the replaced Order (only provided
    # if this Order replaces an existing Order).
    #
    cancellingTransactionID : (TransactionID)
}

StopOrderRejectTransaction	A StopOrderRejectTransaction represents the rejection of the creation of a Stop Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “STOP_ORDER_REJECT” in a
    # StopOrderRejectTransaction.
    #
    type : (TransactionType, default=STOP_ORDER_REJECT),

    #
    # The Stop Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the Stop Order. A positive number
    # of units results in a long Order, and a negative number of units results
    # in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The price threshold specified for the Stop Order. The Stop Order will
    # only be filled by a market price that is equal to or worse than this
    # price.
    #
    price : (PriceValue, required),

    #
    # The worst market price that may be used to fill this Stop Order. If the
    # market gaps and crosses through both the price and the priceBound, the
    # Stop Order will be cancelled instead of being filled.
    #
    priceBound : (PriceValue),

    #
    # The time-in-force requested for the Stop Order.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the Stop Order will be cancelled if its timeInForce is
    # “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Stop Order was initiated
    #
    reason : (StopOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions),

    #
    # The ID of the Order that this Order was intended to replace (only
    # provided if this Order was intended to replace an existing Order).
    #
    intendedReplacesOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

MarketIfTouchedOrderTransaction	A MarketIfTouchedOrderTransaction represents the creation of a MarketIfTouched Order in the user’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “MARKET_IF_TOUCHED_ORDER” in a
    # MarketIfTouchedOrderTransaction.
    #
    type : (TransactionType, default=MARKET_IF_TOUCHED_ORDER),

    #
    # The MarketIfTouched Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the MarketIfTouched Order. A
    # positive number of units results in a long Order, and a negative number
    # of units results in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The price threshold specified for the MarketIfTouched Order. The
    # MarketIfTouched Order will only be filled by a market price that crosses
    # this price from the direction of the market price at the time when the
    # Order was created (the initialMarketPrice). Depending on the value of the
    # Order’s price and initialMarketPrice, the MarketIfTouchedOrder will
    # behave like a Limit or a Stop Order.
    #
    price : (PriceValue, required),

    #
    # The worst market price that may be used to fill this MarketIfTouched
    # Order.
    #
    priceBound : (PriceValue),

    #
    # The time-in-force requested for the MarketIfTouched Order. Restricted to
    # “GTC”, “GFD” and “GTD” for MarketIfTouched Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the MarketIfTouched Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Market-if-touched Order was initiated
    #
    reason : (MarketIfTouchedOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions),

    #
    # The ID of the Order that this Order replaces (only provided if this Order
    # replaces an existing Order).
    #
    replacesOrderID : (OrderID),

    #
    # The ID of the Transaction that cancels the replaced Order (only provided
    # if this Order replaces an existing Order).
    #
    cancellingTransactionID : (TransactionID)
}

MarketIfTouchedOrderRejectTransaction	A MarketIfTouchedOrderRejectTransaction represents the rejection of the creation of a MarketIfTouched Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to
    # “MARKET_IF_TOUCHED_ORDER_REJECT” in a
    # MarketIfTouchedOrderRejectTransaction.
    #
    type : (TransactionType, default=MARKET_IF_TOUCHED_ORDER_REJECT),

    #
    # The MarketIfTouched Order’s Instrument.
    #
    instrument : (InstrumentName, required),

    #
    # The quantity requested to be filled by the MarketIfTouched Order. A
    # positive number of units results in a long Order, and a negative number
    # of units results in a short Order.
    #
    units : (DecimalNumber, required),

    #
    # The price threshold specified for the MarketIfTouched Order. The
    # MarketIfTouched Order will only be filled by a market price that crosses
    # this price from the direction of the market price at the time when the
    # Order was created (the initialMarketPrice). Depending on the value of the
    # Order’s price and initialMarketPrice, the MarketIfTouchedOrder will
    # behave like a Limit or a Stop Order.
    #
    price : (PriceValue, required),

    #
    # The worst market price that may be used to fill this MarketIfTouched
    # Order.
    #
    priceBound : (PriceValue),

    #
    # The time-in-force requested for the MarketIfTouched Order. Restricted to
    # “GTC”, “GFD” and “GTD” for MarketIfTouched Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the MarketIfTouched Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of how Positions in the Account are modified when the Order
    # is filled.
    #
    positionFill : (OrderPositionFill, required, default=DEFAULT),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Market-if-touched Order was initiated
    #
    reason : (MarketIfTouchedOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The specification of the Take Profit Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    takeProfitOnFill : (TakeProfitDetails),

    #
    # The specification of the Stop Loss Order that should be created for a
    # Trade opened when the Order is filled (if such a Trade is created).
    #
    stopLossOnFill : (StopLossDetails),

    #
    # The specification of the Trailing Stop Loss Order that should be created
    # for a Trade that is opened when the Order is filled (if such a Trade is
    # created).
    #
    trailingStopLossOnFill : (TrailingStopLossDetails),

    #
    # The specification of the Guaranteed Stop Loss Order that should be
    # created for a Trade that is opened when the Order is filled (if such a
    # Trade is created).
    #
    guaranteedStopLossOnFill : (GuaranteedStopLossDetails),

    #
    # Client Extensions to add to the Trade created when the Order is filled
    # (if such a Trade is created).  Do not set, modify, delete
    # tradeClientExtensions if your account is associated with MT4.
    #
    tradeClientExtensions : (ClientExtensions),

    #
    # The ID of the Order that this Order was intended to replace (only
    # provided if this Order was intended to replace an existing Order).
    #
    intendedReplacesOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

TakeProfitOrderTransaction	A TakeProfitOrderTransaction represents the creation of a TakeProfit Order in the user’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “TAKE_PROFIT_ORDER” in a
    # TakeProfitOrderTransaction.
    #
    type : (TransactionType, default=TAKE_PROFIT_ORDER),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price threshold specified for the TakeProfit Order. The associated
    # Trade will be closed by a market price that is equal to or better than
    # this threshold.
    #
    price : (PriceValue, required),

    #
    # The time-in-force requested for the TakeProfit Order. Restricted to
    # “GTC”, “GFD” and “GTD” for TakeProfit Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the TakeProfit Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Take Profit Order was initiated
    #
    reason : (TakeProfitOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order replaces (only provided if this Order
    # replaces an existing Order).
    #
    replacesOrderID : (OrderID),

    #
    # The ID of the Transaction that cancels the replaced Order (only provided
    # if this Order replaces an existing Order).
    #
    cancellingTransactionID : (TransactionID)
}

TakeProfitOrderRejectTransaction	A TakeProfitOrderRejectTransaction represents the rejection of the creation of a TakeProfit Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “TAKE_PROFIT_ORDER_REJECT” in
    # a TakeProfitOrderRejectTransaction.
    #
    type : (TransactionType, default=TAKE_PROFIT_ORDER_REJECT),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price threshold specified for the TakeProfit Order. The associated
    # Trade will be closed by a market price that is equal to or better than
    # this threshold.
    #
    price : (PriceValue, required),

    #
    # The time-in-force requested for the TakeProfit Order. Restricted to
    # “GTC”, “GFD” and “GTD” for TakeProfit Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the TakeProfit Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Take Profit Order was initiated
    #
    reason : (TakeProfitOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order was intended to replace (only
    # provided if this Order was intended to replace an existing Order).
    #
    intendedReplacesOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

StopLossOrderTransaction	A StopLossOrderTransaction represents the creation of a StopLoss Order in the user’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “STOP_LOSS_ORDER” in a
    # StopLossOrderTransaction.
    #
    type : (TransactionType, default=STOP_LOSS_ORDER),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price threshold specified for the Stop Loss Order. The associated
    # Trade will be closed by a market price that is equal to or worse than
    # this threshold.
    #
    price : (PriceValue, required),

    #
    # Specifies the distance (in price units) from the Account’s current price
    # to use as the Stop Loss Order price. If the Trade is short the
    # Instrument’s bid price is used, and for long Trades the ask is used.
    #
    distance : (DecimalNumber),

    #
    # The time-in-force requested for the StopLoss Order. Restricted to “GTC”,
    # “GFD” and “GTD” for StopLoss Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the StopLoss Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # Flag indicating that the Stop Loss Order is guaranteed. The default value
    # depends on the GuaranteedStopLossOrderMode of the account, if it is
    # REQUIRED, the default will be true, for DISABLED or ENABLED the default
    # is false.
    #
    #
    # Deprecated: Will be removed in a future API update.
    #
    guaranteed : (boolean, deprecated),

    #
    # The fee that will be charged if the Stop Loss Order is guaranteed and the
    # Order is filled at the guaranteed price. The value is determined at Order
    # creation time. It is in price units and is charged for each unit of the
    # Trade.
    #
    #
    # Deprecated: Will be removed in a future API update.
    #
    guaranteedExecutionPremium : (DecimalNumber, deprecated),

    #
    # The reason that the Stop Loss Order was initiated
    #
    reason : (StopLossOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order replaces (only provided if this Order
    # replaces an existing Order).
    #
    replacesOrderID : (OrderID),

    #
    # The ID of the Transaction that cancels the replaced Order (only provided
    # if this Order replaces an existing Order).
    #
    cancellingTransactionID : (TransactionID)
}

StopLossOrderRejectTransaction	A StopLossOrderRejectTransaction represents the rejection of the creation of a StopLoss Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “STOP_LOSS_ORDER_REJECT” in a
    # StopLossOrderRejectTransaction.
    #
    type : (TransactionType, default=STOP_LOSS_ORDER_REJECT),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price threshold specified for the Stop Loss Order. The associated
    # Trade will be closed by a market price that is equal to or worse than
    # this threshold.
    #
    price : (PriceValue, required),

    #
    # Specifies the distance (in price units) from the Account’s current price
    # to use as the Stop Loss Order price. If the Trade is short the
    # Instrument’s bid price is used, and for long Trades the ask is used.
    #
    distance : (DecimalNumber),

    #
    # The time-in-force requested for the StopLoss Order. Restricted to “GTC”,
    # “GFD” and “GTD” for StopLoss Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the StopLoss Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # Flag indicating that the Stop Loss Order is guaranteed. The default value
    # depends on the GuaranteedStopLossOrderMode of the account, if it is
    # REQUIRED, the default will be true, for DISABLED or ENABLED the default
    # is false.
    #
    #
    # Deprecated: Will be removed in a future API update.
    #
    guaranteed : (boolean, deprecated),

    #
    # The reason that the Stop Loss Order was initiated
    #
    reason : (StopLossOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order was intended to replace (only
    # provided if this Order was intended to replace an existing Order).
    #
    intendedReplacesOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

GuaranteedStopLossOrderTransaction	A GuaranteedStopLossOrderTransaction represents the creation of a GuaranteedStopLoss Order in the user’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “GUARANTEED_STOP_LOSS_ORDER”
    # in a GuaranteedStopLossOrderTransaction.
    #
    type : (TransactionType, default=GUARANTEED_STOP_LOSS_ORDER),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price threshold specified for the Guaranteed Stop Loss Order. The
    # associated Trade will be closed at this price.
    #
    price : (PriceValue, required),

    #
    # Specifies the distance (in price units) from the Account’s current price
    # to use as the Guaranteed Stop Loss Order price. If the Trade is short the
    # Instrument’s bid price is used, and for long Trades the ask is used.
    #
    distance : (DecimalNumber),

    #
    # The time-in-force requested for the GuaranteedStopLoss Order. Restricted
    # to “GTC”, “GFD” and “GTD” for GuaranteedStopLoss Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the GuaranteedStopLoss Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The fee that will be charged if the Guaranteed Stop Loss Order is filled
    # at the guaranteed price. The value is determined at Order creation time.
    # It is in price units and is charged for each unit of the Trade.
    #
    guaranteedExecutionPremium : (DecimalNumber),

    #
    # The reason that the Guaranteed Stop Loss Order was initiated
    #
    reason : (GuaranteedStopLossOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order replaces (only provided if this Order
    # replaces an existing Order).
    #
    replacesOrderID : (OrderID),

    #
    # The ID of the Transaction that cancels the replaced Order (only provided
    # if this Order replaces an existing Order).
    #
    cancellingTransactionID : (TransactionID)
}

GuaranteedStopLossOrderRejectTransaction	A GuaranteedStopLossOrderRejectTransaction represents the rejection of the creation of a GuaranteedStopLoss Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to
    # “GUARANTEED_STOP_LOSS_ORDER_REJECT” in a
    # GuaranteedStopLossOrderRejectTransaction.
    #
    type : (TransactionType, default=GUARANTEED_STOP_LOSS_ORDER_REJECT),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price threshold specified for the Guaranteed Stop Loss Order. The
    # associated Trade will be closed at this price.
    #
    price : (PriceValue, required),

    #
    # Specifies the distance (in price units) from the Account’s current price
    # to use as the Guaranteed Stop Loss Order price. If the Trade is short the
    # Instrument’s bid price is used, and for long Trades the ask is used.
    #
    distance : (DecimalNumber),

    #
    # The time-in-force requested for the GuaranteedStopLoss Order. Restricted
    # to “GTC”, “GFD” and “GTD” for GuaranteedStopLoss Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the GuaranteedStopLoss Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Guaranteed Stop Loss Order was initiated
    #
    reason : (GuaranteedStopLossOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order was intended to replace (only
    # provided if this Order was intended to replace an existing Order).
    #
    intendedReplacesOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

TrailingStopLossOrderTransaction	A TrailingStopLossOrderTransaction represents the creation of a TrailingStopLoss Order in the user’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “TRAILING_STOP_LOSS_ORDER” in
    # a TrailingStopLossOrderTransaction.
    #
    type : (TransactionType, default=TRAILING_STOP_LOSS_ORDER),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price distance (in price units) specified for the TrailingStopLoss
    # Order.
    #
    distance : (DecimalNumber, required),

    #
    # The time-in-force requested for the TrailingStopLoss Order. Restricted to
    # “GTC”, “GFD” and “GTD” for TrailingStopLoss Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the StopLoss Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Trailing Stop Loss Order was initiated
    #
    reason : (TrailingStopLossOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order replaces (only provided if this Order
    # replaces an existing Order).
    #
    replacesOrderID : (OrderID),

    #
    # The ID of the Transaction that cancels the replaced Order (only provided
    # if this Order replaces an existing Order).
    #
    cancellingTransactionID : (TransactionID)
}

TrailingStopLossOrderRejectTransaction	A TrailingStopLossOrderRejectTransaction represents the rejection of the creation of a TrailingStopLoss Order.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to
    # “TRAILING_STOP_LOSS_ORDER_REJECT” in a
    # TrailingStopLossOrderRejectTransaction.
    #
    type : (TransactionType, default=TRAILING_STOP_LOSS_ORDER_REJECT),

    #
    # The ID of the Trade to close when the price threshold is breached.
    #
    tradeID : (TradeID, required),

    #
    # The client ID of the Trade to be closed when the price threshold is
    # breached.
    #
    clientTradeID : (ClientID),

    #
    # The price distance (in price units) specified for the TrailingStopLoss
    # Order.
    #
    distance : (DecimalNumber, required),

    #
    # The time-in-force requested for the TrailingStopLoss Order. Restricted to
    # “GTC”, “GFD” and “GTD” for TrailingStopLoss Orders.
    #
    timeInForce : (TimeInForce, required, default=GTC),

    #
    # The date/time when the StopLoss Order will be cancelled if its
    # timeInForce is “GTD”.
    #
    gtdTime : (DateTime),

    #
    # Specification of which price component should be used when determining if
    # an Order should be triggered and filled. This allows Orders to be
    # triggered based on the bid, ask, mid, default (ask for buy, bid for sell)
    # or inverse (ask for sell, bid for buy) price depending on the desired
    # behaviour. Orders are always filled using their default price component.
    # This feature is only provided through the REST API. Clients who choose to
    # specify a non-default trigger condition will not see it reflected in any
    # of OANDA’s proprietary or partner trading platforms, their transaction
    # history or their account statements. OANDA platforms always assume that
    # an Order’s trigger condition is set to the default value when indicating
    # the distance from an Order’s trigger price, and will always provide the
    # default trigger condition when creating or modifying an Order. A special
    # restriction applies when creating a Guaranteed Stop Loss Order. In this
    # case the TriggerCondition value must either be “DEFAULT”, or the
    # “natural” trigger side “DEFAULT” results in. So for a Guaranteed Stop
    # Loss Order for a long trade valid values are “DEFAULT” and “BID”, and for
    # short trades “DEFAULT” and “ASK” are valid.
    #
    triggerCondition : (OrderTriggerCondition, required, default=DEFAULT),

    #
    # The reason that the Trailing Stop Loss Order was initiated
    #
    reason : (TrailingStopLossOrderReason),

    #
    # Client Extensions to add to the Order (only provided if the Order is
    # being created with client extensions).
    #
    clientExtensions : (ClientExtensions),

    #
    # The ID of the OrderFill Transaction that caused this Order to be created
    # (only provided if this Order was created automatically when another Order
    # was filled).
    #
    orderFillTransactionID : (TransactionID),

    #
    # The ID of the Order that this Order was intended to replace (only
    # provided if this Order was intended to replace an existing Order).
    #
    intendedReplacesOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

OrderFillTransaction	An OrderFillTransaction represents the filling of an Order in the client’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “ORDER_FILL” for an
    # OrderFillTransaction.
    #
    type : (TransactionType, default=ORDER_FILL),

    #
    # The ID of the Order filled.
    #
    orderID : (OrderID),

    #
    # The client Order ID of the Order filled (only provided if the client has
    # assigned one).
    #
    clientOrderID : (ClientID),

    #
    # The name of the filled Order’s instrument.
    #
    instrument : (InstrumentName),

    #
    # The number of units filled by the OrderFill.
    #
    units : (DecimalNumber),

    #
    # This is the conversion factor in effect for the Account at the time of
    # the OrderFill for converting any gains realized in Instrument quote units
    # into units of the Account’s home currency.
    #
    #
    # Deprecated: Will be removed in a future API update.
    #
    gainQuoteHomeConversionFactor : (DecimalNumber, deprecated),

    #
    # This is the conversion factor in effect for the Account at the time of
    # the OrderFill for converting any losses realized in Instrument quote
    # units into units of the Account’s home currency.
    #
    #
    # Deprecated: Will be removed in a future API update.
    #
    lossQuoteHomeConversionFactor : (DecimalNumber, deprecated),

    #
    # The HomeConversionFactors in effect at the time of the OrderFill.
    #
    homeConversionFactors : (HomeConversionFactors),

    #
    # This field is now deprecated and should no longer be used. The individual
    # tradesClosed, tradeReduced and tradeOpened fields contain the
    # exact/official price each unit was filled at.
    #
    #
    # Deprecated: Will be removed in a future API update.
    #
    price : (PriceValue, deprecated),

    #
    # The price that all of the units of the OrderFill should have been filled
    # at, in the absence of guaranteed price execution. This factors in the
    # Account’s current ClientPrice, used liquidity and the units of the
    # OrderFill only. If no Trades were closed with their price clamped for
    # guaranteed stop loss enforcement, then this value will match the price
    # fields of each Trade opened, closed, and reduced, and they will all be
    # the exact same.
    #
    fullVWAP : (PriceValue),

    #
    # The price in effect for the account at the time of the Order fill.
    #
    fullPrice : (ClientPrice),

    #
    # The reason that an Order was filled
    #
    reason : (OrderFillReason),

    #
    # The profit or loss incurred when the Order was filled.
    #
    pl : (AccountUnits),

    #
    # The profit or loss incurred when the Order was filled, in the
    # Instrument’s quote currency.
    #
    quotePL : (DecimalNumber),

    #
    # The financing paid or collected when the Order was filled.
    #
    financing : (AccountUnits),

    #
    # The financing paid or collected when the Order was filled, in the
    # Instrument’s base currency.
    #
    baseFinancing : (DecimalNumber),

    #
    # The financing paid or collected when the Order was filled, in the
    # Instrument’s quote currency.
    #
    quoteFinancing : (DecimalNumber),

    #
    # The commission charged in the Account’s home currency as a result of
    # filling the Order. The commission is always represented as a positive
    # quantity of the Account’s home currency, however it reduces the balance
    # in the Account.
    #
    commission : (AccountUnits),

    #
    # The total guaranteed execution fees charged for all Trades opened, closed
    # or reduced with guaranteed Stop Loss Orders.
    #
    guaranteedExecutionFee : (AccountUnits),

    #
    # The total guaranteed execution fees charged for all Trades opened, closed
    # or reduced with guaranteed Stop Loss Orders, expressed in the
    # Instrument’s quote currency.
    #
    quoteGuaranteedExecutionFee : (DecimalNumber),

    #
    # The Account’s balance after the Order was filled.
    #
    accountBalance : (AccountUnits),

    #
    # The Trade that was opened when the Order was filled (only provided if
    # filling the Order resulted in a new Trade).
    #
    tradeOpened : (TradeOpen),

    #
    # The Trades that were closed when the Order was filled (only provided if
    # filling the Order resulted in a closing open Trades).
    #
    tradesClosed : (Array[TradeReduce]),

    #
    # The Trade that was reduced when the Order was filled (only provided if
    # filling the Order resulted in reducing an open Trade).
    #
    tradeReduced : (TradeReduce),

    #
    # The half spread cost for the OrderFill, which is the sum of the
    # halfSpreadCost values in the tradeOpened, tradesClosed and tradeReduced
    # fields. This can be a positive or negative value and is represented in
    # the home currency of the Account.
    #
    halfSpreadCost : (AccountUnits)
}

OrderCancelTransaction	An OrderCancelTransaction represents the cancellation of an Order in the client’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “ORDER_CANCEL” for an
    # OrderCancelTransaction.
    #
    type : (TransactionType, default=ORDER_CANCEL),

    #
    # The ID of the Order cancelled
    #
    orderID : (OrderID),

    #
    # The client ID of the Order cancelled (only provided if the Order has a
    # client Order ID).
    #
    clientOrderID : (OrderID),

    #
    # The reason that the Order was cancelled.
    #
    reason : (OrderCancelReason),

    #
    # The ID of the Order that replaced this Order (only provided if this Order
    # was cancelled for replacement).
    #
    replacedByOrderID : (OrderID)
}

OrderCancelRejectTransaction	An OrderCancelRejectTransaction represents the rejection of the cancellation of an Order in the client’s Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “ORDER_CANCEL_REJECT” for an
    # OrderCancelRejectTransaction.
    #
    type : (TransactionType, default=ORDER_CANCEL_REJECT),

    #
    # The ID of the Order intended to be cancelled
    #
    orderID : (OrderID),

    #
    # The client ID of the Order intended to be cancelled (only provided if the
    # Order has a client Order ID).
    #
    clientOrderID : (OrderID),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

OrderClientExtensionsModifyTransaction	A OrderClientExtensionsModifyTransaction represents the modification of an Order’s Client Extensions.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to
    # “ORDER_CLIENT_EXTENSIONS_MODIFY” for a
    # OrderClientExtensionsModifyTransaction.
    #
    type : (TransactionType, default=ORDER_CLIENT_EXTENSIONS_MODIFY),

    #
    # The ID of the Order who’s client extensions are to be modified.
    #
    orderID : (OrderID),

    #
    # The original Client ID of the Order who’s client extensions are to be
    # modified.
    #
    clientOrderID : (ClientID),

    #
    # The new Client Extensions for the Order.
    #
    clientExtensionsModify : (ClientExtensions),

    #
    # The new Client Extensions for the Order’s Trade on fill.
    #
    tradeClientExtensionsModify : (ClientExtensions)
}

OrderClientExtensionsModifyRejectTransaction	A OrderClientExtensionsModifyRejectTransaction represents the rejection of the modification of an Order’s Client Extensions.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to
    # “ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT” for a
    # OrderClientExtensionsModifyRejectTransaction.
    #
    type : (TransactionType, default=ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT),

    #
    # The ID of the Order who’s client extensions are to be modified.
    #
    orderID : (OrderID),

    #
    # The original Client ID of the Order who’s client extensions are to be
    # modified.
    #
    clientOrderID : (ClientID),

    #
    # The new Client Extensions for the Order.
    #
    clientExtensionsModify : (ClientExtensions),

    #
    # The new Client Extensions for the Order’s Trade on fill.
    #
    tradeClientExtensionsModify : (ClientExtensions),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

TradeClientExtensionsModifyTransaction	A TradeClientExtensionsModifyTransaction represents the modification of a Trade’s Client Extensions.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to
    # “TRADE_CLIENT_EXTENSIONS_MODIFY” for a
    # TradeClientExtensionsModifyTransaction.
    #
    type : (TransactionType, default=TRADE_CLIENT_EXTENSIONS_MODIFY),

    #
    # The ID of the Trade who’s client extensions are to be modified.
    #
    tradeID : (TradeID),

    #
    # The original Client ID of the Trade who’s client extensions are to be
    # modified.
    #
    clientTradeID : (ClientID),

    #
    # The new Client Extensions for the Trade.
    #
    tradeClientExtensionsModify : (ClientExtensions)
}

TradeClientExtensionsModifyRejectTransaction	A TradeClientExtensionsModifyRejectTransaction represents the rejection of the modification of a Trade’s Client Extensions.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to
    # “TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT” for a
    # TradeClientExtensionsModifyRejectTransaction.
    #
    type : (TransactionType, default=TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT),

    #
    # The ID of the Trade who’s client extensions are to be modified.
    #
    tradeID : (TradeID),

    #
    # The original Client ID of the Trade who’s client extensions are to be
    # modified.
    #
    clientTradeID : (ClientID),

    #
    # The new Client Extensions for the Trade.
    #
    tradeClientExtensionsModify : (ClientExtensions),

    #
    # The reason that the Reject Transaction was created
    #
    rejectReason : (TransactionRejectReason)
}

MarginCallEnterTransaction	A MarginCallEnterTransaction is created when an Account enters the margin call state.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “MARGIN_CALL_ENTER” for an
    # MarginCallEnterTransaction.
    #
    type : (TransactionType, default=MARGIN_CALL_ENTER)
}

MarginCallExtendTransaction	A MarginCallExtendTransaction is created when the margin call state for an Account has been extended.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “MARGIN_CALL_EXTEND” for an
    # MarginCallExtendTransaction.
    #
    type : (TransactionType, default=MARGIN_CALL_EXTEND),

    #
    # The number of the extensions to the Account’s current margin call that
    # have been applied. This value will be set to 1 for the first
    # MarginCallExtend Transaction
    #
    extensionNumber : (integer)
}

MarginCallExitTransaction	A MarginCallExitTransaction is created when an Account leaves the margin call state.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “MARGIN_CALL_EXIT” for an
    # MarginCallExitTransaction.
    #
    type : (TransactionType, default=MARGIN_CALL_EXIT)
}

DelayedTradeClosureTransaction	A DelayedTradeClosure Transaction is created administratively to indicate open trades that should have been closed but weren’t because the open trades’ instruments were untradeable at the time. Open trades listed in this transaction will be closed once their respective instruments become tradeable.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “DELAYED_TRADE_CLOSURE” for an
    # DelayedTradeClosureTransaction.
    #
    type : (TransactionType, default=DELAYED_TRADE_CLOSURE),

    #
    # The reason for the delayed trade closure
    #
    reason : (MarketOrderReason),

    #
    # List of Trade ID’s identifying the open trades that will be closed when
    # their respective instruments become tradeable
    #
    tradeIDs : (TradeID)
}


DailyFinancingTransaction	A DailyFinancingTransaction represents the daily payment/collection of financing for an Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “DAILY_FINANCING” for a
    # DailyFinancingTransaction.
    #
    type : (TransactionType, default=DAILY_FINANCING),

    #
    # The amount of financing paid/collected for the Account.
    #
    financing : (AccountUnits),

    #
    # The Account’s balance after daily financing.
    #
    accountBalance : (AccountUnits),

    #
    # The account financing mode at the time of the daily financing. This field
    # is no longer in use moving forward and was replaced by
    # accountFinancingMode in individual positionFinancings since the financing
    # mode could differ between instruments.
    #
    #
    # Deprecated: Will be removed in a future API update.
    #
    accountFinancingMode : (AccountFinancingMode, deprecated),

    #
    # The financing paid/collected for each Position in the Account.
    #
    positionFinancings : (Array[PositionFinancing])
}


DividendAdjustmentTransaction	A DividendAdjustment Transaction is created administratively to pay or collect dividend adjustment mounts to or from an Account.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “DIVIDEND_ADJUSTMENT” for a
    # DividendAdjustmentTransaction.
    #
    type : (TransactionType, default=DIVIDEND_ADJUSTMENT),

    #
    # The name of the instrument for the dividendAdjustment transaction
    #
    instrument : (InstrumentName),

    #
    # The total dividend adjustment amount paid or collected in the Account’s
    # home currency for the Account as a result of applying the
    # DividendAdjustment Transaction. This is the sum of the dividend
    # adjustments paid/collected for each OpenTradeDividendAdjustment found
    # within the Transaction.
    #
    dividendAdjustment : (AccountUnits),

    #
    # The total dividend adjustment amount paid or collected in the
    # Instrument’s quote currency for the Account as a result of applying the
    # DividendAdjustment Transaction. This is the sum of the quote dividend
    # adjustments paid/collected for each OpenTradeDividendAdjustment found
    # within the Transaction.
    #
    quoteDividendAdjustment : (DecimalNumber),

    #
    # The HomeConversionFactors in effect at the time of the
    # DividendAdjustment.
    #
    homeConversionFactors : (HomeConversionFactors),

    #
    # The Account balance after applying the DividendAdjustment Transaction
    #
    accountBalance : (AccountUnits),

    #
    # The dividend adjustment payment/collection details for each open Trade,
    # within the Account, for which a dividend adjustment is to be paid or
    # collected.
    #
    openTradeDividendAdjustments : (Array[OpenTradeDividendAdjustment])
}

ResetResettablePLTransaction	A ResetResettablePLTransaction represents the resetting of the Account’s resettable PL counters.
{
    #
    # The Transaction’s Identifier.
    #
    id : (TransactionID),

    #
    # The date/time when the Transaction was created.
    #
    time : (DateTime),

    #
    # The ID of the user that initiated the creation of the Transaction.
    #
    userID : (integer),

    #
    # The ID of the Account the Transaction was created for.
    #
    accountID : (AccountID),

    #
    # The ID of the “batch” that the Transaction belongs to. Transactions in
    # the same batch are applied to the Account simultaneously.
    #
    batchID : (TransactionID),

    #
    # The Request ID of the request which generated the transaction.
    #
    requestID : (RequestID),

    #
    # The Type of the Transaction. Always set to “RESET_RESETTABLE_PL” for a
    # ResetResettablePLTransaction.
    #
    type : (TransactionType, default=RESET_RESETTABLE_PL)
}