// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *TradesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trades":
			if in.IsNull() {
				in.Skip()
				out.Trades = nil
			} else {
				in.Delim('[')
				if out.Trades == nil {
					if !in.IsDelim(']') {
						out.Trades = make([]*Trade, 0, 8)
					} else {
						out.Trades = []*Trade{}
					}
				} else {
					out.Trades = (out.Trades)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Trade
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Trade)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Trades = append(out.Trades, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in TradesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trades\":"
		out.RawString(prefix[1:])
		if in.Trades == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Trades {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *TradesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.IDs = nil
			} else {
				in.Delim('[')
				if out.IDs == nil {
					if !in.IsDelim(']') {
						out.IDs = make([]TradeID, 0, 4)
					} else {
						out.IDs = []TradeID{}
					}
				} else {
					out.IDs = (out.IDs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TradeID
					v4 = TradeID(in.String())
					out.IDs = append(out.IDs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			out.State = TradeStateFilter(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "count":
			out.Count = int(in.Int())
		case "beforeID":
			out.BeforeID = TradeID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in TradesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.IDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.IDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"beforeID\":"
		out.RawString(prefix)
		out.String(string(in.BeforeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *TradeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trade":
			if in.IsNull() {
				in.Skip()
				out.Trade = nil
			} else {
				if out.Trade == nil {
					out.Trade = new(Trade)
				}
				(*out.Trade).UnmarshalEasyJSON(in)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in TradeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trade\":"
		out.RawString(prefix[1:])
		if in.Trade == nil {
			out.RawString("null")
		} else {
			(*in.Trade).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *TradeModifyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "takeProfitOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderCancelTransaction = nil
			} else {
				if out.TakeProfitOrderCancelTransaction == nil {
					out.TakeProfitOrderCancelTransaction = new(OrderCancelTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in, out.TakeProfitOrderCancelTransaction)
			}
		case "takeProfitOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderTransaction = nil
			} else {
				if out.TakeProfitOrderTransaction == nil {
					out.TakeProfitOrderTransaction = new(TakeProfitOrderTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel5(in, out.TakeProfitOrderTransaction)
			}
		case "takeProfitOrderFillTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderFillTransaction = nil
			} else {
				if out.TakeProfitOrderFillTransaction == nil {
					out.TakeProfitOrderFillTransaction = new(OrderFillTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel6(in, out.TakeProfitOrderFillTransaction)
			}
		case "takeProfitOrderCreatedCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderCreatedCancelTransaction = nil
			} else {
				if out.TakeProfitOrderCreatedCancelTransaction == nil {
					out.TakeProfitOrderCreatedCancelTransaction = new(OrderCancelTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in, out.TakeProfitOrderCreatedCancelTransaction)
			}
		case "stopLossOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderCancelTransaction = nil
			} else {
				if out.StopLossOrderCancelTransaction == nil {
					out.StopLossOrderCancelTransaction = new(OrderCancelTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in, out.StopLossOrderCancelTransaction)
			}
		case "stopLossOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderTransaction = nil
			} else {
				if out.StopLossOrderTransaction == nil {
					out.StopLossOrderTransaction = new(StopLossOrderTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel7(in, out.StopLossOrderTransaction)
			}
		case "stopLossOrderFillTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderFillTransaction = nil
			} else {
				if out.StopLossOrderFillTransaction == nil {
					out.StopLossOrderFillTransaction = new(OrderFillTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel6(in, out.StopLossOrderFillTransaction)
			}
		case "stopLossOrderCreatedCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderCreatedCancelTransaction = nil
			} else {
				if out.StopLossOrderCreatedCancelTransaction == nil {
					out.StopLossOrderCreatedCancelTransaction = new(OrderCancelTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in, out.StopLossOrderCreatedCancelTransaction)
			}
		case "trailingStopLossOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderCancelTransaction = nil
			} else {
				if out.TrailingStopLossOrderCancelTransaction == nil {
					out.TrailingStopLossOrderCancelTransaction = new(OrderCancelTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in, out.TrailingStopLossOrderCancelTransaction)
			}
		case "trailingStopLossOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderTransaction = nil
			} else {
				if out.TrailingStopLossOrderTransaction == nil {
					out.TrailingStopLossOrderTransaction = new(TrailingStopLossOrderTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel8(in, out.TrailingStopLossOrderTransaction)
			}
		case "guaranteedStopLossOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderCancelTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderCancelTransaction == nil {
					out.GuaranteedStopLossOrderCancelTransaction = new(OrderCancelTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in, out.GuaranteedStopLossOrderCancelTransaction)
			}
		case "guaranteedStopLossOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderTransaction == nil {
					out.GuaranteedStopLossOrderTransaction = new(GuaranteedStopLossOrderTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel9(in, out.GuaranteedStopLossOrderTransaction)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TransactionID
					v7 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in TradeModifyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"takeProfitOrderCancelTransaction\":"
		out.RawString(prefix[1:])
		if in.TakeProfitOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out, *in.TakeProfitOrderCancelTransaction)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel5(out, *in.TakeProfitOrderTransaction)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderFillTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderFillTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel6(out, *in.TakeProfitOrderFillTransaction)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderCreatedCancelTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderCreatedCancelTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out, *in.TakeProfitOrderCreatedCancelTransaction)
		}
	}
	{
		const prefix string = ",\"stopLossOrderCancelTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out, *in.StopLossOrderCancelTransaction)
		}
	}
	{
		const prefix string = ",\"stopLossOrderTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel7(out, *in.StopLossOrderTransaction)
		}
	}
	{
		const prefix string = ",\"stopLossOrderFillTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderFillTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel6(out, *in.StopLossOrderFillTransaction)
		}
	}
	{
		const prefix string = ",\"stopLossOrderCreatedCancelTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderCreatedCancelTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out, *in.StopLossOrderCreatedCancelTransaction)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderCancelTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out, *in.TrailingStopLossOrderCancelTransaction)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel8(out, *in.TrailingStopLossOrderTransaction)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderCancelTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out, *in.GuaranteedStopLossOrderCancelTransaction)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel9(out, *in.GuaranteedStopLossOrderTransaction)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.RelatedTransactionIDs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeModifyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeModifyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeModifyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeModifyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *GuaranteedStopLossOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "reason":
			out.Reason = GuaranteedStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in GuaranteedStopLossOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in *jlexer.Lexer, out *ClientExtensions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ClientID(in.String())
		case "tag":
			out.Tag = ClientTag(in.String())
		case "comment":
			out.Comment = ClientComment(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out *jwriter.Writer, in ClientExtensions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *TrailingStopLossOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TrailingStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in TrailingStopLossOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *StopLossOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "guaranteedExecutionPremium":
			out.GuaranteedExecutionPremium = DecimalNumber(in.String())
		case "reason":
			out.Reason = StopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in StopLossOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"guaranteedExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionPremium))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *OrderFillTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = ClientID(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "gainQuoteHomeConversionFactor":
			out.GainQuoteHomeConversionFactor = DecimalNumber(in.String())
		case "lossQuoteHomeConversionFactor":
			out.LossQuoteHomeConversionFactor = DecimalNumber(in.String())
		case "homeConversionFactors":
			if in.IsNull() {
				in.Skip()
				out.HomeConversionFactors = nil
			} else {
				if out.HomeConversionFactors == nil {
					out.HomeConversionFactors = new(HomeConversionFactors)
				}
				(*out.HomeConversionFactors).UnmarshalEasyJSON(in)
			}
		case "price":
			out.Price = PriceValue(in.String())
		case "fullVWAP":
			out.FullVWAP = PriceValue(in.String())
		case "fullPrice":
			(out.FullPrice).UnmarshalEasyJSON(in)
		case "reason":
			out.Reason = OrderFillReason(in.String())
		case "pl":
			out.Pl = AccountUnits(in.String())
		case "quotePL":
			out.QuotePL = DecimalNumber(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "baseFinancing":
			out.BaseFinancing = DecimalNumber(in.String())
		case "quoteFinancing":
			out.QuoteFinancing = DecimalNumber(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "guaranteedExecutionFee":
			out.GuaranteedExecutionFee = AccountUnits(in.String())
		case "quoteGuaranteedExecutionFee":
			out.QuoteGuaranteedExecutionFee = DecimalNumber(in.String())
		case "accountBalance":
			out.AccountBalance = AccountUnits(in.String())
		case "tradeOpened":
			if in.IsNull() {
				in.Skip()
				out.TradeOpened = nil
			} else {
				if out.TradeOpened == nil {
					out.TradeOpened = new(TradeOpen)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel11(in, out.TradeOpened)
			}
		case "tradesClosed":
			if in.IsNull() {
				in.Skip()
				out.TradesClosed = nil
			} else {
				in.Delim('[')
				if out.TradesClosed == nil {
					if !in.IsDelim(']') {
						out.TradesClosed = make([]*TradeReduce, 0, 8)
					} else {
						out.TradesClosed = []*TradeReduce{}
					}
				} else {
					out.TradesClosed = (out.TradesClosed)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *TradeReduce
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(TradeReduce)
						}
						easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel12(in, v10)
					}
					out.TradesClosed = append(out.TradesClosed, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradeReduced":
			if in.IsNull() {
				in.Skip()
				out.TradeReduced = nil
			} else {
				if out.TradeReduced == nil {
					out.TradeReduced = new(TradeReduce)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel12(in, out.TradeReduced)
			}
		case "halfSpreadCost":
			out.HalfSpreadCost = AccountUnits(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in OrderFillTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"gainQuoteHomeConversionFactor\":"
		out.RawString(prefix)
		out.String(string(in.GainQuoteHomeConversionFactor))
	}
	{
		const prefix string = ",\"lossQuoteHomeConversionFactor\":"
		out.RawString(prefix)
		out.String(string(in.LossQuoteHomeConversionFactor))
	}
	{
		const prefix string = ",\"homeConversionFactors\":"
		out.RawString(prefix)
		if in.HomeConversionFactors == nil {
			out.RawString("null")
		} else {
			(*in.HomeConversionFactors).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"fullVWAP\":"
		out.RawString(prefix)
		out.String(string(in.FullVWAP))
	}
	{
		const prefix string = ",\"fullPrice\":"
		out.RawString(prefix)
		(in.FullPrice).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"quotePL\":"
		out.RawString(prefix)
		out.String(string(in.QuotePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"baseFinancing\":"
		out.RawString(prefix)
		out.String(string(in.BaseFinancing))
	}
	{
		const prefix string = ",\"quoteFinancing\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFinancing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"guaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"quoteGuaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.QuoteGuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"accountBalance\":"
		out.RawString(prefix)
		out.String(string(in.AccountBalance))
	}
	{
		const prefix string = ",\"tradeOpened\":"
		out.RawString(prefix)
		if in.TradeOpened == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel11(out, *in.TradeOpened)
		}
	}
	{
		const prefix string = ",\"tradesClosed\":"
		out.RawString(prefix)
		if in.TradesClosed == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.TradesClosed {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel12(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tradeReduced\":"
		out.RawString(prefix)
		if in.TradeReduced == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel12(out, *in.TradeReduced)
		}
	}
	{
		const prefix string = ",\"halfSpreadCost\":"
		out.RawString(prefix)
		out.String(string(in.HalfSpreadCost))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel12(in *jlexer.Lexer, out *TradeReduce) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "realizedPL":
			out.RealizedPL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "baseFinancing":
			out.BaseFinancing = DecimalNumber(in.String())
		case "quoteFinancing":
			out.QuoteFinancing = DecimalNumber(in.String())
		case "financingRate":
			out.FinancingRate = DecimalNumber(in.String())
		case "guaranteedExecutionFee":
			out.GuaranteedExecutionFee = AccountUnits(in.String())
		case "quoteGuaranteedExecutionFee":
			out.QuoteGuaranteedExecutionFee = DecimalNumber(in.String())
		case "halfSpreadCost":
			out.HalfSpreadCost = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel12(out *jwriter.Writer, in TradeReduce) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"realizedPL\":"
		out.RawString(prefix)
		out.String(string(in.RealizedPL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"baseFinancing\":"
		out.RawString(prefix)
		out.String(string(in.BaseFinancing))
	}
	{
		const prefix string = ",\"quoteFinancing\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFinancing))
	}
	{
		const prefix string = ",\"financingRate\":"
		out.RawString(prefix)
		out.String(string(in.FinancingRate))
	}
	{
		const prefix string = ",\"guaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"quoteGuaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.QuoteGuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"halfSpreadCost\":"
		out.RawString(prefix)
		out.String(string(in.HalfSpreadCost))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel11(in *jlexer.Lexer, out *TradeOpen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "guaranteedExecutionFee":
			out.GuaranteedExecutionFee = AccountUnits(in.String())
		case "quoteGuaranteedExecutionFee":
			out.QuoteGuaranteedExecutionFee = DecimalNumber(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "halfSpreadCost":
			out.HalfSpreadCost = AccountUnits(in.String())
		case "initialMarginRequired":
			out.InitialMarginRequired = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel11(out *jwriter.Writer, in TradeOpen) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"guaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"quoteGuaranteedExecutionFee\":"
		out.RawString(prefix)
		out.String(string(in.QuoteGuaranteedExecutionFee))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"halfSpreadCost\":"
		out.RawString(prefix)
		out.String(string(in.HalfSpreadCost))
	}
	{
		const prefix string = ",\"initialMarginRequired\":"
		out.RawString(prefix)
		out.String(string(in.InitialMarginRequired))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *TakeProfitOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TakeProfitOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "replacesOrderID":
			out.ReplacesOrderID = OrderID(in.String())
		case "cancellingTransactionID":
			out.CancellingTransactionID = TransactionID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in TakeProfitOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"replacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacesOrderID))
	}
	{
		const prefix string = ",\"cancellingTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.CancellingTransactionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *OrderCancelTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = OrderID(in.String())
		case "reason":
			out.Reason = OrderCancelReason(in.String())
		case "replacedByOrderID":
			out.ReplacedByOrderID = OrderID(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in OrderCancelTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"replacedByOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ReplacedByOrderID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel13(in *jlexer.Lexer, out *TradeModifyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "takeProfit":
			if in.IsNull() {
				in.Skip()
				out.TakeProfit = nil
			} else {
				if out.TakeProfit == nil {
					out.TakeProfit = new(TakeProfitDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel14(in, out.TakeProfit)
			}
		case "stopLoss":
			if in.IsNull() {
				in.Skip()
				out.StopLoss = nil
			} else {
				if out.StopLoss == nil {
					out.StopLoss = new(StopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel15(in, out.StopLoss)
			}
		case "trailingStopLoss":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLoss = nil
			} else {
				if out.TrailingStopLoss == nil {
					out.TrailingStopLoss = new(TrailingStopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel16(in, out.TrailingStopLoss)
			}
		case "guaranteedStopLoss":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLoss = nil
			} else {
				if out.GuaranteedStopLoss == nil {
					out.GuaranteedStopLoss = new(GuaranteedStopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel17(in, out.GuaranteedStopLoss)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel13(out *jwriter.Writer, in TradeModifyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"takeProfit\":"
		out.RawString(prefix[1:])
		if in.TakeProfit == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel14(out, *in.TakeProfit)
		}
	}
	{
		const prefix string = ",\"stopLoss\":"
		out.RawString(prefix)
		if in.StopLoss == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel15(out, *in.StopLoss)
		}
	}
	{
		const prefix string = ",\"trailingStopLoss\":"
		out.RawString(prefix)
		if in.TrailingStopLoss == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel16(out, *in.TrailingStopLoss)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLoss\":"
		out.RawString(prefix)
		if in.GuaranteedStopLoss == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel17(out, *in.GuaranteedStopLoss)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeModifyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeModifyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeModifyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeModifyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel13(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel17(in *jlexer.Lexer, out *GuaranteedStopLossDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel17(out *jwriter.Writer, in GuaranteedStopLossDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel16(in *jlexer.Lexer, out *TrailingStopLossDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel16(out *jwriter.Writer, in TrailingStopLossDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix[1:])
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel15(in *jlexer.Lexer, out *StopLossDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel15(out *jwriter.Writer, in StopLossDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel14(in *jlexer.Lexer, out *TakeProfitDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel14(out *jwriter.Writer, in TakeProfitDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel18(in *jlexer.Lexer, out *TradeModifyError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "takeProfitOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderCancelRejectTransaction = nil
			} else {
				if out.TakeProfitOrderCancelRejectTransaction == nil {
					out.TakeProfitOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel19(in, out.TakeProfitOrderCancelRejectTransaction)
			}
		case "takeProfitOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderRejectTransaction = nil
			} else {
				if out.TakeProfitOrderRejectTransaction == nil {
					out.TakeProfitOrderRejectTransaction = new(TakeProfitOrderRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel20(in, out.TakeProfitOrderRejectTransaction)
			}
		case "stopLossOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderCancelRejectTransaction = nil
			} else {
				if out.StopLossOrderCancelRejectTransaction == nil {
					out.StopLossOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel19(in, out.StopLossOrderCancelRejectTransaction)
			}
		case "stopLossOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderRejectTransaction = nil
			} else {
				if out.StopLossOrderRejectTransaction == nil {
					out.StopLossOrderRejectTransaction = new(StopLossOrderRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel21(in, out.StopLossOrderRejectTransaction)
			}
		case "trailingStopLossOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderCancelRejectTransaction = nil
			} else {
				if out.TrailingStopLossOrderCancelRejectTransaction == nil {
					out.TrailingStopLossOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel19(in, out.TrailingStopLossOrderCancelRejectTransaction)
			}
		case "trailingStopLossOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderRejectTransaction = nil
			} else {
				if out.TrailingStopLossOrderRejectTransaction == nil {
					out.TrailingStopLossOrderRejectTransaction = new(TrailingStopLossOrderRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel22(in, out.TrailingStopLossOrderRejectTransaction)
			}
		case "guaranteedStopLossOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderCancelRejectTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderCancelRejectTransaction == nil {
					out.GuaranteedStopLossOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel19(in, out.GuaranteedStopLossOrderCancelRejectTransaction)
			}
		case "guaranteedStopLossOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderRejectTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderRejectTransaction == nil {
					out.GuaranteedStopLossOrderRejectTransaction = new(GuaranteedStopLossOrderRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel23(in, out.GuaranteedStopLossOrderRejectTransaction)
			}
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel18(out *jwriter.Writer, in TradeModifyError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"takeProfitOrderCancelRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.TakeProfitOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel19(out, *in.TakeProfitOrderCancelRejectTransaction)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel20(out, *in.TakeProfitOrderRejectTransaction)
		}
	}
	{
		const prefix string = ",\"stopLossOrderCancelRejectTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel19(out, *in.StopLossOrderCancelRejectTransaction)
		}
	}
	{
		const prefix string = ",\"stopLossOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel21(out, *in.StopLossOrderRejectTransaction)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderCancelRejectTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel19(out, *in.TrailingStopLossOrderCancelRejectTransaction)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel22(out, *in.TrailingStopLossOrderRejectTransaction)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderCancelRejectTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel19(out, *in.GuaranteedStopLossOrderCancelRejectTransaction)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel23(out, *in.GuaranteedStopLossOrderRejectTransaction)
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeModifyError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeModifyError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeModifyError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeModifyError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel18(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel23(in *jlexer.Lexer, out *GuaranteedStopLossOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = GuaranteedStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel23(out *jwriter.Writer, in GuaranteedStopLossOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel22(in *jlexer.Lexer, out *TrailingStopLossOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TrailingStopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel22(out *jwriter.Writer, in TrailingStopLossOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel21(in *jlexer.Lexer, out *StopLossOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "distance":
			out.Distance = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "guaranteed":
			out.Guaranteed = bool(in.Bool())
		case "reason":
			out.Reason = StopLossOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel21(out *jwriter.Writer, in StopLossOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.String(string(in.Distance))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"guaranteed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Guaranteed))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel20(in *jlexer.Lexer, out *TakeProfitOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "price":
			out.Price = PriceValue(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "gtdTime":
			out.GtdTime = DateTime(in.String())
		case "triggerCondition":
			out.TriggerCondition = OrderTriggerCondition(in.String())
		case "reason":
			out.Reason = TakeProfitOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "orderFillTransactionID":
			out.OrderFillTransactionID = TransactionID(in.String())
		case "intendedReplacesOrderID":
			out.IntendedReplacesOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel20(out *jwriter.Writer, in TakeProfitOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"gtdTime\":"
		out.RawString(prefix)
		out.String(string(in.GtdTime))
	}
	{
		const prefix string = ",\"triggerCondition\":"
		out.RawString(prefix)
		out.String(string(in.TriggerCondition))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"orderFillTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.OrderFillTransactionID))
	}
	{
		const prefix string = ",\"intendedReplacesOrderID\":"
		out.RawString(prefix)
		out.String(string(in.IntendedReplacesOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel19(in *jlexer.Lexer, out *OrderCancelRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "orderID":
			out.OrderID = OrderID(in.String())
		case "clientOrderID":
			out.ClientOrderID = OrderID(in.String())
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel19(out *jwriter.Writer, in OrderCancelRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderID\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel24(in *jlexer.Lexer, out *TradeCloseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderCreateTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCreateTransaction = nil
			} else {
				if out.OrderCreateTransaction == nil {
					out.OrderCreateTransaction = new(MarketOrderTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel25(in, out.OrderCreateTransaction)
			}
		case "orderFillTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderFillTransaction = nil
			} else {
				if out.OrderFillTransaction == nil {
					out.OrderFillTransaction = new(OrderFillTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel6(in, out.OrderFillTransaction)
			}
		case "orderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCancelTransaction = nil
			} else {
				if out.OrderCancelTransaction == nil {
					out.OrderCancelTransaction = new(OrderCancelTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in, out.OrderCancelTransaction)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 TransactionID
					v13 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel24(out *jwriter.Writer, in TradeCloseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderCreateTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderCreateTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel25(out, *in.OrderCreateTransaction)
		}
	}
	{
		const prefix string = ",\"orderFillTransaction\":"
		out.RawString(prefix)
		if in.OrderFillTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel6(out, *in.OrderFillTransaction)
		}
	}
	{
		const prefix string = ",\"orderCancelTransaction\":"
		out.RawString(prefix)
		if in.OrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out, *in.OrderCancelTransaction)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.RelatedTransactionIDs {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeCloseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeCloseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeCloseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeCloseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel24(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel25(in *jlexer.Lexer, out *MarketOrderTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "tradeClose":
			if in.IsNull() {
				in.Skip()
				out.TradeClose = nil
			} else {
				if out.TradeClose == nil {
					out.TradeClose = new(MarketOrderTradeClose)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel26(in, out.TradeClose)
			}
		case "longPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.LongPositionCloseout = nil
			} else {
				if out.LongPositionCloseout == nil {
					out.LongPositionCloseout = new(MarketOrderPositionCloseout)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel27(in, out.LongPositionCloseout)
			}
		case "shortPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.ShortPositionCloseout = nil
			} else {
				if out.ShortPositionCloseout == nil {
					out.ShortPositionCloseout = new(MarketOrderPositionCloseout)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel27(in, out.ShortPositionCloseout)
			}
		case "marginCloseout":
			if in.IsNull() {
				in.Skip()
				out.MarginCloseout = nil
			} else {
				if out.MarginCloseout == nil {
					out.MarginCloseout = new(MarketOrderMarginCloseout)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel28(in, out.MarginCloseout)
			}
		case "delayedTradeClose":
			if in.IsNull() {
				in.Skip()
				out.DelayedTradeClose = nil
			} else {
				if out.DelayedTradeClose == nil {
					out.DelayedTradeClose = new(MarketOrderDelayedTradeClose)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel29(in, out.DelayedTradeClose)
			}
		case "reason":
			out.Reason = MarketOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel14(in, out.TakeProfitOnFill)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel15(in, out.StopLossOnFill)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel16(in, out.TrailingStopLossOnFill)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel17(in, out.GuaranteedStopLossOnFill)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.TradeClientExtensions)
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel25(out *jwriter.Writer, in MarketOrderTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"tradeClose\":"
		out.RawString(prefix)
		if in.TradeClose == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel26(out, *in.TradeClose)
		}
	}
	{
		const prefix string = ",\"longPositionCloseout\":"
		out.RawString(prefix)
		if in.LongPositionCloseout == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel27(out, *in.LongPositionCloseout)
		}
	}
	{
		const prefix string = ",\"shortPositionCloseout\":"
		out.RawString(prefix)
		if in.ShortPositionCloseout == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel27(out, *in.ShortPositionCloseout)
		}
	}
	{
		const prefix string = ",\"marginCloseout\":"
		out.RawString(prefix)
		if in.MarginCloseout == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel28(out, *in.MarginCloseout)
		}
	}
	{
		const prefix string = ",\"delayedTradeClose\":"
		out.RawString(prefix)
		if in.DelayedTradeClose == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel29(out, *in.DelayedTradeClose)
		}
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel14(out, *in.TakeProfitOnFill)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel15(out, *in.StopLossOnFill)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel16(out, *in.TrailingStopLossOnFill)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel17(out, *in.GuaranteedStopLossOnFill)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.TradeClientExtensions)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel29(in *jlexer.Lexer, out *MarketOrderDelayedTradeClose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeId":
			out.TradeID = TradeID(in.String())
		case "clientTradeId":
			out.ClientTradeID = TradeID(in.String())
		case "sourceTransactionID":
			out.SourceTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel29(out *jwriter.Writer, in MarketOrderDelayedTradeClose) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeId\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"sourceTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.SourceTransactionID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel28(in *jlexer.Lexer, out *MarketOrderMarginCloseout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			out.Reason = MarketOrderMarginCloseoutReason(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel28(out *jwriter.Writer, in MarketOrderMarginCloseout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel27(in *jlexer.Lexer, out *MarketOrderPositionCloseout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel27(out *jwriter.Writer, in MarketOrderPositionCloseout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel26(in *jlexer.Lexer, out *MarketOrderTradeClose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeId":
			out.TradeID = TradeID(in.String())
		case "clientTradeId":
			out.ClientTradeID = string(in.String())
		case "units":
			out.Units = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel26(out *jwriter.Writer, in MarketOrderTradeClose) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeId\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel30(in *jlexer.Lexer, out *TradeCloseError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderRejectTransaction = nil
			} else {
				if out.OrderRejectTransaction == nil {
					out.OrderRejectTransaction = new(MarketOrderRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel31(in, out.OrderRejectTransaction)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TransactionID
					v16 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel30(out *jwriter.Writer, in TradeCloseError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel31(out, *in.OrderRejectTransaction)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.RelatedTransactionIDs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeCloseError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeCloseError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeCloseError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeCloseError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel30(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel31(in *jlexer.Lexer, out *MarketOrderRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "units":
			out.Units = DecimalNumber(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		case "priceBound":
			out.PriceBound = PriceValue(in.String())
		case "positionFill":
			out.PositionFill = OrderPositionFill(in.String())
		case "tradeClose":
			if in.IsNull() {
				in.Skip()
				out.TradeClose = nil
			} else {
				if out.TradeClose == nil {
					out.TradeClose = new(MarketOrderTradeClose)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel26(in, out.TradeClose)
			}
		case "longPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.LongPositionCloseout = nil
			} else {
				if out.LongPositionCloseout == nil {
					out.LongPositionCloseout = new(MarketOrderPositionCloseout)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel27(in, out.LongPositionCloseout)
			}
		case "shortPositionCloseout":
			if in.IsNull() {
				in.Skip()
				out.ShortPositionCloseout = nil
			} else {
				if out.ShortPositionCloseout == nil {
					out.ShortPositionCloseout = new(MarketOrderPositionCloseout)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel27(in, out.ShortPositionCloseout)
			}
		case "marginCloseout":
			if in.IsNull() {
				in.Skip()
				out.MarginCloseout = nil
			} else {
				if out.MarginCloseout == nil {
					out.MarginCloseout = new(MarketOrderMarginCloseout)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel28(in, out.MarginCloseout)
			}
		case "delayedTradeClose":
			if in.IsNull() {
				in.Skip()
				out.DelayedTradeClose = nil
			} else {
				if out.DelayedTradeClose == nil {
					out.DelayedTradeClose = new(MarketOrderDelayedTradeClose)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel29(in, out.DelayedTradeClose)
			}
		case "reason":
			out.Reason = MarketOrderReason(in.String())
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		case "takeProfitOnFill":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOnFill = nil
			} else {
				if out.TakeProfitOnFill == nil {
					out.TakeProfitOnFill = new(TakeProfitDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel14(in, out.TakeProfitOnFill)
			}
		case "stopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.StopLossOnFill = nil
			} else {
				if out.StopLossOnFill == nil {
					out.StopLossOnFill = new(StopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel15(in, out.StopLossOnFill)
			}
		case "trailingStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOnFill = nil
			} else {
				if out.TrailingStopLossOnFill == nil {
					out.TrailingStopLossOnFill = new(TrailingStopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel16(in, out.TrailingStopLossOnFill)
			}
		case "guaranteedStopLossOnFill":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOnFill = nil
			} else {
				if out.GuaranteedStopLossOnFill == nil {
					out.GuaranteedStopLossOnFill = new(GuaranteedStopLossDetails)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel17(in, out.GuaranteedStopLossOnFill)
			}
		case "tradeClientExtensions":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensions = nil
			} else {
				if out.TradeClientExtensions == nil {
					out.TradeClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.TradeClientExtensions)
			}
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel31(out *jwriter.Writer, in MarketOrderRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"priceBound\":"
		out.RawString(prefix)
		out.String(string(in.PriceBound))
	}
	{
		const prefix string = ",\"positionFill\":"
		out.RawString(prefix)
		out.String(string(in.PositionFill))
	}
	{
		const prefix string = ",\"tradeClose\":"
		out.RawString(prefix)
		if in.TradeClose == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel26(out, *in.TradeClose)
		}
	}
	{
		const prefix string = ",\"longPositionCloseout\":"
		out.RawString(prefix)
		if in.LongPositionCloseout == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel27(out, *in.LongPositionCloseout)
		}
	}
	{
		const prefix string = ",\"shortPositionCloseout\":"
		out.RawString(prefix)
		if in.ShortPositionCloseout == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel27(out, *in.ShortPositionCloseout)
		}
	}
	{
		const prefix string = ",\"marginCloseout\":"
		out.RawString(prefix)
		if in.MarginCloseout == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel28(out, *in.MarginCloseout)
		}
	}
	{
		const prefix string = ",\"delayedTradeClose\":"
		out.RawString(prefix)
		if in.DelayedTradeClose == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel29(out, *in.DelayedTradeClose)
		}
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix)
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	{
		const prefix string = ",\"takeProfitOnFill\":"
		out.RawString(prefix)
		if in.TakeProfitOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel14(out, *in.TakeProfitOnFill)
		}
	}
	{
		const prefix string = ",\"stopLossOnFill\":"
		out.RawString(prefix)
		if in.StopLossOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel15(out, *in.StopLossOnFill)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOnFill\":"
		out.RawString(prefix)
		if in.TrailingStopLossOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel16(out, *in.TrailingStopLossOnFill)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOnFill\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOnFill == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel17(out, *in.GuaranteedStopLossOnFill)
		}
	}
	{
		const prefix string = ",\"tradeClientExtensions\":"
		out.RawString(prefix)
		if in.TradeClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.TradeClientExtensions)
		}
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel32(in *jlexer.Lexer, out *TradeClientExtensionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeClientExtensionsModifyTransaction":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModifyTransaction = nil
			} else {
				if out.TradeClientExtensionsModifyTransaction == nil {
					out.TradeClientExtensionsModifyTransaction = new(TradeClientExtensionsModifyTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel33(in, out.TradeClientExtensionsModifyTransaction)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 TransactionID
					v19 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel32(out *jwriter.Writer, in TradeClientExtensionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeClientExtensionsModifyTransaction\":"
		out.RawString(prefix[1:])
		if in.TradeClientExtensionsModifyTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel33(out, *in.TradeClientExtensionsModifyTransaction)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.RelatedTransactionIDs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel32(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel33(in *jlexer.Lexer, out *TradeClientExtensionsModifyTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "tradeClientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModify = nil
			} else {
				if out.TradeClientExtensionsModify == nil {
					out.TradeClientExtensionsModify = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.TradeClientExtensionsModify)
			}
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel33(out *jwriter.Writer, in TradeClientExtensionsModifyTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"tradeClientExtensionsModify\":"
		out.RawString(prefix)
		if in.TradeClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.TradeClientExtensionsModify)
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel34(in *jlexer.Lexer, out *TradeClientExtensionsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.ClientExtensions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel34(out *jwriter.Writer, in TradeClientExtensionsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix[1:])
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientExtensions)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel34(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel35(in *jlexer.Lexer, out *TradeClientExtensionsError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeClientExtensionsModifyRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModifyRejectTransaction = nil
			} else {
				if out.TradeClientExtensionsModifyRejectTransaction == nil {
					out.TradeClientExtensionsModifyRejectTransaction = new(TradeClientExtensionsModifyRejectTransaction)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel36(in, out.TradeClientExtensionsModifyRejectTransaction)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v22 TransactionID
					v22 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel35(out *jwriter.Writer, in TradeClientExtensionsError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeClientExtensionsModifyRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.TradeClientExtensionsModifyRejectTransaction == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel36(out, *in.TradeClientExtensionsModifyRejectTransaction)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.RelatedTransactionIDs {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel35(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel36(in *jlexer.Lexer, out *TradeClientExtensionsModifyRejectTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "tradeID":
			out.TradeID = TradeID(in.String())
		case "clientTradeID":
			out.ClientTradeID = ClientID(in.String())
		case "tradeClientExtensionsModify":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModify = nil
			} else {
				if out.TradeClientExtensionsModify == nil {
					out.TradeClientExtensionsModify = new(ClientExtensions)
				}
				easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in, out.TradeClientExtensionsModify)
			}
		case "rejectReason":
			out.RejectReason = TransactionRejectReason(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel36(out *jwriter.Writer, in TradeClientExtensionsModifyRejectTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"tradeID\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"clientTradeID\":"
		out.RawString(prefix)
		out.String(string(in.ClientTradeID))
	}
	{
		const prefix string = ",\"tradeClientExtensionsModify\":"
		out.RawString(prefix)
		if in.TradeClientExtensionsModify == nil {
			out.RawString("null")
		} else {
			easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out, *in.TradeClientExtensionsModify)
		}
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
