// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *TradesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trades":
			if in.IsNull() {
				in.Skip()
				out.Trades = nil
			} else {
				in.Delim('[')
				if out.Trades == nil {
					if !in.IsDelim(']') {
						out.Trades = make([]*Trade, 0, 8)
					} else {
						out.Trades = []*Trade{}
					}
				} else {
					out.Trades = (out.Trades)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Trade
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Trade)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Trades = append(out.Trades, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in TradesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trades\":"
		out.RawString(prefix[1:])
		if in.Trades == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Trades {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *TradesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.IDs = nil
			} else {
				in.Delim('[')
				if out.IDs == nil {
					if !in.IsDelim(']') {
						out.IDs = make([]TradeID, 0, 4)
					} else {
						out.IDs = []TradeID{}
					}
				} else {
					out.IDs = (out.IDs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TradeID
					v4 = TradeID(in.String())
					out.IDs = append(out.IDs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			out.State = TradeStateFilter(in.String())
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "count":
			out.Count = int(in.Int())
		case "beforeID":
			out.BeforeID = TradeID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in TradesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.IDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.IDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix)
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"beforeID\":"
		out.RawString(prefix)
		out.String(string(in.BeforeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *TradeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trade":
			if in.IsNull() {
				in.Skip()
				out.Trade = nil
			} else {
				if out.Trade == nil {
					out.Trade = new(Trade)
				}
				(*out.Trade).UnmarshalEasyJSON(in)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in TradeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trade\":"
		out.RawString(prefix[1:])
		if in.Trade == nil {
			out.RawString("null")
		} else {
			(*in.Trade).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *TradeModifyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "takeProfitOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderCancelTransaction = nil
			} else {
				if out.TakeProfitOrderCancelTransaction == nil {
					out.TakeProfitOrderCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.TakeProfitOrderCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "takeProfitOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderTransaction = nil
			} else {
				if out.TakeProfitOrderTransaction == nil {
					out.TakeProfitOrderTransaction = new(TakeProfitOrderTransaction)
				}
				(*out.TakeProfitOrderTransaction).UnmarshalEasyJSON(in)
			}
		case "takeProfitOrderFillTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderFillTransaction = nil
			} else {
				if out.TakeProfitOrderFillTransaction == nil {
					out.TakeProfitOrderFillTransaction = new(OrderFillTransaction)
				}
				(*out.TakeProfitOrderFillTransaction).UnmarshalEasyJSON(in)
			}
		case "takeProfitOrderCreatedCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderCreatedCancelTransaction = nil
			} else {
				if out.TakeProfitOrderCreatedCancelTransaction == nil {
					out.TakeProfitOrderCreatedCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.TakeProfitOrderCreatedCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "stopLossOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderCancelTransaction = nil
			} else {
				if out.StopLossOrderCancelTransaction == nil {
					out.StopLossOrderCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.StopLossOrderCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "stopLossOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderTransaction = nil
			} else {
				if out.StopLossOrderTransaction == nil {
					out.StopLossOrderTransaction = new(StopLossOrderTransaction)
				}
				(*out.StopLossOrderTransaction).UnmarshalEasyJSON(in)
			}
		case "stopLossOrderFillTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderFillTransaction = nil
			} else {
				if out.StopLossOrderFillTransaction == nil {
					out.StopLossOrderFillTransaction = new(OrderFillTransaction)
				}
				(*out.StopLossOrderFillTransaction).UnmarshalEasyJSON(in)
			}
		case "stopLossOrderCreatedCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderCreatedCancelTransaction = nil
			} else {
				if out.StopLossOrderCreatedCancelTransaction == nil {
					out.StopLossOrderCreatedCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.StopLossOrderCreatedCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderCancelTransaction = nil
			} else {
				if out.TrailingStopLossOrderCancelTransaction == nil {
					out.TrailingStopLossOrderCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.TrailingStopLossOrderCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderTransaction = nil
			} else {
				if out.TrailingStopLossOrderTransaction == nil {
					out.TrailingStopLossOrderTransaction = new(TrailingStopLossOrderTransaction)
				}
				(*out.TrailingStopLossOrderTransaction).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOrderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderCancelTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderCancelTransaction == nil {
					out.GuaranteedStopLossOrderCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.GuaranteedStopLossOrderCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOrderTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderTransaction == nil {
					out.GuaranteedStopLossOrderTransaction = new(GuaranteedStopLossOrderTransaction)
				}
				(*out.GuaranteedStopLossOrderTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TransactionID
					v7 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in TradeModifyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"takeProfitOrderCancelTransaction\":"
		out.RawString(prefix[1:])
		if in.TakeProfitOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOrderCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOrderTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderFillTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderFillTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOrderFillTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderCreatedCancelTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderCreatedCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOrderCreatedCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOrderCancelTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOrderCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOrderTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderTransaction == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOrderTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOrderFillTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderFillTransaction == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOrderFillTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOrderCreatedCancelTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderCreatedCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOrderCreatedCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderCancelTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOrderCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOrderTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderCancelTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOrderCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderTransaction == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOrderTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.RelatedTransactionIDs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeModifyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeModifyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeModifyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeModifyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *TradeModifyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "takeProfit":
			if in.IsNull() {
				in.Skip()
				out.TakeProfit = nil
			} else {
				if out.TakeProfit == nil {
					out.TakeProfit = new(TakeProfitDetails)
				}
				(*out.TakeProfit).UnmarshalEasyJSON(in)
			}
		case "stopLoss":
			if in.IsNull() {
				in.Skip()
				out.StopLoss = nil
			} else {
				if out.StopLoss == nil {
					out.StopLoss = new(StopLossDetails)
				}
				(*out.StopLoss).UnmarshalEasyJSON(in)
			}
		case "trailingStopLoss":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLoss = nil
			} else {
				if out.TrailingStopLoss == nil {
					out.TrailingStopLoss = new(TrailingStopLossDetails)
				}
				(*out.TrailingStopLoss).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLoss":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLoss = nil
			} else {
				if out.GuaranteedStopLoss == nil {
					out.GuaranteedStopLoss = new(GuaranteedStopLossDetails)
				}
				(*out.GuaranteedStopLoss).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in TradeModifyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"takeProfit\":"
		out.RawString(prefix[1:])
		if in.TakeProfit == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfit).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLoss\":"
		out.RawString(prefix)
		if in.StopLoss == nil {
			out.RawString("null")
		} else {
			(*in.StopLoss).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLoss\":"
		out.RawString(prefix)
		if in.TrailingStopLoss == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLoss).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLoss\":"
		out.RawString(prefix)
		if in.GuaranteedStopLoss == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLoss).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeModifyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeModifyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeModifyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeModifyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel4(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *TradeModifyError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "takeProfitOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderCancelRejectTransaction = nil
			} else {
				if out.TakeProfitOrderCancelRejectTransaction == nil {
					out.TakeProfitOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				(*out.TakeProfitOrderCancelRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "takeProfitOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitOrderRejectTransaction = nil
			} else {
				if out.TakeProfitOrderRejectTransaction == nil {
					out.TakeProfitOrderRejectTransaction = new(TakeProfitOrderRejectTransaction)
				}
				(*out.TakeProfitOrderRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "stopLossOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderCancelRejectTransaction = nil
			} else {
				if out.StopLossOrderCancelRejectTransaction == nil {
					out.StopLossOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				(*out.StopLossOrderCancelRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "stopLossOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.StopLossOrderRejectTransaction = nil
			} else {
				if out.StopLossOrderRejectTransaction == nil {
					out.StopLossOrderRejectTransaction = new(StopLossOrderRejectTransaction)
				}
				(*out.StopLossOrderRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderCancelRejectTransaction = nil
			} else {
				if out.TrailingStopLossOrderCancelRejectTransaction == nil {
					out.TrailingStopLossOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				(*out.TrailingStopLossOrderCancelRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "trailingStopLossOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TrailingStopLossOrderRejectTransaction = nil
			} else {
				if out.TrailingStopLossOrderRejectTransaction == nil {
					out.TrailingStopLossOrderRejectTransaction = new(TrailingStopLossOrderRejectTransaction)
				}
				(*out.TrailingStopLossOrderRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOrderCancelRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderCancelRejectTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderCancelRejectTransaction == nil {
					out.GuaranteedStopLossOrderCancelRejectTransaction = new(OrderCancelRejectTransaction)
				}
				(*out.GuaranteedStopLossOrderCancelRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "guaranteedStopLossOrderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderRejectTransaction = nil
			} else {
				if out.GuaranteedStopLossOrderRejectTransaction == nil {
					out.GuaranteedStopLossOrderRejectTransaction = new(GuaranteedStopLossOrderRejectTransaction)
				}
				(*out.GuaranteedStopLossOrderRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in TradeModifyError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"takeProfitOrderCancelRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.TakeProfitOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOrderCancelRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"takeProfitOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.TakeProfitOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TakeProfitOrderRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOrderCancelRejectTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOrderCancelRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stopLossOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.StopLossOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.StopLossOrderRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderCancelRejectTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOrderCancelRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"trailingStopLossOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.TrailingStopLossOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TrailingStopLossOrderRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderCancelRejectTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderCancelRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOrderCancelRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderRejectTransaction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.GuaranteedStopLossOrderRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeModifyError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeModifyError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeModifyError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeModifyError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel5(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *TradeCloseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderCreateTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCreateTransaction = nil
			} else {
				if out.OrderCreateTransaction == nil {
					out.OrderCreateTransaction = new(MarketOrderTransaction)
				}
				(*out.OrderCreateTransaction).UnmarshalEasyJSON(in)
			}
		case "orderFillTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderFillTransaction = nil
			} else {
				if out.OrderFillTransaction == nil {
					out.OrderFillTransaction = new(OrderFillTransaction)
				}
				(*out.OrderFillTransaction).UnmarshalEasyJSON(in)
			}
		case "orderCancelTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderCancelTransaction = nil
			} else {
				if out.OrderCancelTransaction == nil {
					out.OrderCancelTransaction = new(OrderCancelTransaction)
				}
				(*out.OrderCancelTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 TransactionID
					v10 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in TradeCloseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderCreateTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderCreateTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderCreateTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderFillTransaction\":"
		out.RawString(prefix)
		if in.OrderFillTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderFillTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"orderCancelTransaction\":"
		out.RawString(prefix)
		if in.OrderCancelTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderCancelTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.RelatedTransactionIDs {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeCloseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeCloseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeCloseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeCloseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel6(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *TradeCloseError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.OrderRejectTransaction = nil
			} else {
				if out.OrderRejectTransaction == nil {
					out.OrderRejectTransaction = new(MarketOrderRejectTransaction)
				}
				(*out.OrderRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 TransactionID
					v13 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in TradeCloseError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.OrderRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.OrderRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.RelatedTransactionIDs {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeCloseError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeCloseError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeCloseError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeCloseError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel7(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *TradeClientExtensionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeClientExtensionsModifyTransaction":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModifyTransaction = nil
			} else {
				if out.TradeClientExtensionsModifyTransaction == nil {
					out.TradeClientExtensionsModifyTransaction = new(TradeClientExtensionsModifyTransaction)
				}
				(*out.TradeClientExtensionsModifyTransaction).UnmarshalEasyJSON(in)
			}
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TransactionID
					v16 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in TradeClientExtensionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeClientExtensionsModifyTransaction\":"
		out.RawString(prefix[1:])
		if in.TradeClientExtensionsModifyTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensionsModifyTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.RelatedTransactionIDs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel8(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *TradeClientExtensionsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientExtensions":
			if in.IsNull() {
				in.Skip()
				out.ClientExtensions = nil
			} else {
				if out.ClientExtensions == nil {
					out.ClientExtensions = new(ClientExtensions)
				}
				(*out.ClientExtensions).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in TradeClientExtensionsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientExtensions\":"
		out.RawString(prefix[1:])
		if in.ClientExtensions == nil {
			out.RawString("null")
		} else {
			(*in.ClientExtensions).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel9(l, v)
}
func easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(in *jlexer.Lexer, out *TradeClientExtensionsError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeClientExtensionsModifyRejectTransaction":
			if in.IsNull() {
				in.Skip()
				out.TradeClientExtensionsModifyRejectTransaction = nil
			} else {
				if out.TradeClientExtensionsModifyRejectTransaction == nil {
					out.TradeClientExtensionsModifyRejectTransaction = new(TradeClientExtensionsModifyRejectTransaction)
				}
				(*out.TradeClientExtensionsModifyRejectTransaction).UnmarshalEasyJSON(in)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "relatedTransactionIDs":
			if in.IsNull() {
				in.Skip()
				out.RelatedTransactionIDs = nil
			} else {
				in.Delim('[')
				if out.RelatedTransactionIDs == nil {
					if !in.IsDelim(']') {
						out.RelatedTransactionIDs = make([]TransactionID, 0, 4)
					} else {
						out.RelatedTransactionIDs = []TransactionID{}
					}
				} else {
					out.RelatedTransactionIDs = (out.RelatedTransactionIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 TransactionID
					v19 = TransactionID(in.String())
					out.RelatedTransactionIDs = append(out.RelatedTransactionIDs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(out *jwriter.Writer, in TradeClientExtensionsError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tradeClientExtensionsModifyRejectTransaction\":"
		out.RawString(prefix[1:])
		if in.TradeClientExtensionsModifyRejectTransaction == nil {
			out.RawString("null")
		} else {
			(*in.TradeClientExtensionsModifyRejectTransaction).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"relatedTransactionIDs\":"
		out.RawString(prefix)
		if in.RelatedTransactionIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.RelatedTransactionIDs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeClientExtensionsError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeClientExtensionsError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f24b5b6EncodeGithubComKamaiuOandaGoModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeClientExtensionsError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeClientExtensionsError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f24b5b6DecodeGithubComKamaiuOandaGoModel10(l, v)
}
