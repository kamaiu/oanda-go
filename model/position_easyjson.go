// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *PositionSide) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "units":
			out.Units = DecimalNumber(in.String())
		case "averagePrice":
			out.AveragePrice = PriceValue(in.String())
		case "tradeIDs":
			if in.IsNull() {
				in.Skip()
				out.TradeIDs = nil
			} else {
				in.Delim('[')
				if out.TradeIDs == nil {
					if !in.IsDelim(']') {
						out.TradeIDs = make([]TradeID, 0, 4)
					} else {
						out.TradeIDs = []TradeID{}
					}
				} else {
					out.TradeIDs = (out.TradeIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TradeID
					v1 = TradeID(in.String())
					out.TradeIDs = append(out.TradeIDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pl":
			out.Pl = AccountUnits(in.String())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in PositionSide) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix[1:])
		out.String(string(in.Units))
	}
	{
		const prefix string = ",\"averagePrice\":"
		out.RawString(prefix)
		out.String(string(in.AveragePrice))
	}
	{
		const prefix string = ",\"tradeIDs\":"
		out.RawString(prefix)
		if in.TradeIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TradeIDs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionSide) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionSide) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionSide) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionSide) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "pl":
			out.Pl = AccountUnits(in.String())
		case "unrealizedPL":
			out.UnrealizedPL = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		case "resettablePL":
			out.ResettablePL = AccountUnits(in.String())
		case "financing":
			out.Financing = AccountUnits(in.String())
		case "commission":
			out.Commission = AccountUnits(in.String())
		case "dividendAdjustment":
			out.DividendAdjustment = AccountUnits(in.String())
		case "guaranteedExecutionFees":
			out.GuaranteedExecutionFees = AccountUnits(in.String())
		case "long":
			if in.IsNull() {
				in.Skip()
				out.Long = nil
			} else {
				if out.Long == nil {
					out.Long = new(PositionSide)
				}
				(*out.Long).UnmarshalEasyJSON(in)
			}
		case "short":
			if in.IsNull() {
				in.Skip()
				out.Short = nil
			} else {
				if out.Short == nil {
					out.Short = new(PositionSide)
				}
				(*out.Short).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"unrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPL))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	{
		const prefix string = ",\"resettablePL\":"
		out.RawString(prefix)
		out.String(string(in.ResettablePL))
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		out.String(string(in.Financing))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"dividendAdjustment\":"
		out.RawString(prefix)
		out.String(string(in.DividendAdjustment))
	}
	{
		const prefix string = ",\"guaranteedExecutionFees\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedExecutionFees))
	}
	{
		const prefix string = ",\"long\":"
		out.RawString(prefix)
		if in.Long == nil {
			out.RawString("null")
		} else {
			(*in.Long).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"short\":"
		out.RawString(prefix)
		if in.Short == nil {
			out.RawString("null")
		} else {
			(*in.Short).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *CalculatedPositionState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instrument":
			out.Instrument = InstrumentName(in.String())
		case "netUnrealizedPL":
			out.NetUnrealizedPL = AccountUnits(in.String())
		case "longUnrealizedPL":
			out.LongUnrealizedPL = AccountUnits(in.String())
		case "shortUnrealizedPL":
			out.ShortUnrealizedPL = AccountUnits(in.String())
		case "marginUsed":
			out.MarginUsed = AccountUnits(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in CalculatedPositionState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instrument\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instrument))
	}
	{
		const prefix string = ",\"netUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.NetUnrealizedPL))
	}
	{
		const prefix string = ",\"longUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.LongUnrealizedPL))
	}
	{
		const prefix string = ",\"shortUnrealizedPL\":"
		out.RawString(prefix)
		out.String(string(in.ShortUnrealizedPL))
	}
	{
		const prefix string = ",\"marginUsed\":"
		out.RawString(prefix)
		out.String(string(in.MarginUsed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CalculatedPositionState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CalculatedPositionState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0c3566dEncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CalculatedPositionState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CalculatedPositionState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0c3566dDecodeGithubComKamaiuOandaGoModel2(l, v)
}
