// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel(in *jlexer.Lexer, out *AccountsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				in.Delim('[')
				if out.Accounts == nil {
					if !in.IsDelim(']') {
						out.Accounts = make([]*AccountProperties, 0, 8)
					} else {
						out.Accounts = []*AccountProperties{}
					}
				} else {
					out.Accounts = (out.Accounts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *AccountProperties
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(AccountProperties)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Accounts = append(out.Accounts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel(out *jwriter.Writer, in AccountsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accounts\":"
		out.RawString(prefix[1:])
		if in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Accounts {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel(l, v)
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel1(in *jlexer.Lexer, out *AccountSummaryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(AccountSummary)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel1(out *jwriter.Writer, in AccountSummaryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		out.RawString(prefix[1:])
		if in.Account == nil {
			out.RawString("null")
		} else {
			(*in.Account).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountSummaryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountSummaryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountSummaryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountSummaryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel1(l, v)
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel2(in *jlexer.Lexer, out *AccountResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Account = nil
			} else {
				if out.Account == nil {
					out.Account = new(Account)
				}
				(*out.Account).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel2(out *jwriter.Writer, in AccountResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		out.RawString(prefix[1:])
		if in.Account == nil {
			out.RawString("null")
		} else {
			(*in.Account).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel2(l, v)
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel3(in *jlexer.Lexer, out *AccountInstrumentsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Instruments = nil
			} else {
				in.Delim('[')
				if out.Instruments == nil {
					if !in.IsDelim(']') {
						out.Instruments = make([]*Instrument, 0, 8)
					} else {
						out.Instruments = []*Instrument{}
					}
				} else {
					out.Instruments = (out.Instruments)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Instrument
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Instrument)
						}
						easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel4(in, v4)
					}
					out.Instruments = append(out.Instruments, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel3(out *jwriter.Writer, in AccountInstrumentsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		out.RawString(prefix[1:])
		if in.Instruments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Instruments {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel4(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountInstrumentsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountInstrumentsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountInstrumentsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountInstrumentsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel3(l, v)
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel4(in *jlexer.Lexer, out *Instrument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = InstrumentName(in.String())
		case "type":
			out.Type = InstrumentType(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "pipLocation":
			out.PipLocation = int64(in.Int64())
		case "displayPrecision":
			out.DisplayPrecision = int64(in.Int64())
		case "tradeUnitsPrecision":
			out.TradeUnitsPrecision = int64(in.Int64())
		case "minimumTradeSize":
			out.MinimumTradeSize = DecimalNumber(in.String())
		case "maximumTrailingStopDistance":
			out.MaximumTrailingStopDistance = DecimalNumber(in.String())
		case "minimumGuaranteedStopLossDistance":
			out.MinimumGuaranteedStopLossDistance = DecimalNumber(in.String())
		case "minimumTrailingStopDistance":
			out.MinimumTrailingStopDistance = DecimalNumber(in.String())
		case "maximumPositionSize":
			out.MaximumPositionSize = DecimalNumber(in.String())
		case "maximumOrderUnits":
			out.MaximumOrderUnits = DecimalNumber(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "commission":
			out.Commission = DecimalNumber(in.String())
		case "guaranteedStopLossOrderMode":
			out.GuaranteedStopLossOrderMode = DecimalNumber(in.String())
		case "guaranteedStopLossOrderExecutionPremium":
			out.GuaranteedStopLossOrderExecutionPremium = DecimalNumber(in.String())
		case "guaranteedStopLossOrderLevelRestriction":
			if in.IsNull() {
				in.Skip()
				out.GuaranteedStopLossOrderLevelRestriction = nil
			} else {
				if out.GuaranteedStopLossOrderLevelRestriction == nil {
					out.GuaranteedStopLossOrderLevelRestriction = new(GuaranteedStopLossOrderLevelRestriction)
				}
				easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel5(in, out.GuaranteedStopLossOrderLevelRestriction)
			}
		case "financing":
			easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel6(in, &out.Financing)
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]Tag, 0, 2)
					} else {
						out.Tags = []Tag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Tag
					easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel7(in, &v7)
					out.Tags = append(out.Tags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel4(out *jwriter.Writer, in Instrument) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"pipLocation\":"
		out.RawString(prefix)
		out.Int64(int64(in.PipLocation))
	}
	{
		const prefix string = ",\"displayPrecision\":"
		out.RawString(prefix)
		out.Int64(int64(in.DisplayPrecision))
	}
	{
		const prefix string = ",\"tradeUnitsPrecision\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeUnitsPrecision))
	}
	{
		const prefix string = ",\"minimumTradeSize\":"
		out.RawString(prefix)
		out.String(string(in.MinimumTradeSize))
	}
	{
		const prefix string = ",\"maximumTrailingStopDistance\":"
		out.RawString(prefix)
		out.String(string(in.MaximumTrailingStopDistance))
	}
	{
		const prefix string = ",\"minimumGuaranteedStopLossDistance\":"
		out.RawString(prefix)
		out.String(string(in.MinimumGuaranteedStopLossDistance))
	}
	{
		const prefix string = ",\"minimumTrailingStopDistance\":"
		out.RawString(prefix)
		out.String(string(in.MinimumTrailingStopDistance))
	}
	{
		const prefix string = ",\"maximumPositionSize\":"
		out.RawString(prefix)
		out.String(string(in.MaximumPositionSize))
	}
	{
		const prefix string = ",\"maximumOrderUnits\":"
		out.RawString(prefix)
		out.String(string(in.MaximumOrderUnits))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderMode\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedStopLossOrderMode))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderExecutionPremium\":"
		out.RawString(prefix)
		out.String(string(in.GuaranteedStopLossOrderExecutionPremium))
	}
	{
		const prefix string = ",\"guaranteedStopLossOrderLevelRestriction\":"
		out.RawString(prefix)
		if in.GuaranteedStopLossOrderLevelRestriction == nil {
			out.RawString("null")
		} else {
			easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel5(out, *in.GuaranteedStopLossOrderLevelRestriction)
		}
	}
	{
		const prefix string = ",\"financing\":"
		out.RawString(prefix)
		easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel6(out, in.Financing)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Tags {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel7(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel7(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel7(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel6(in *jlexer.Lexer, out *InstrumentFinancing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "longRate":
			out.LongRate = DecimalNumber(in.String())
		case "shortRate":
			out.ShortRate = DecimalNumber(in.String())
		case "financingDaysOfWeek":
			if in.IsNull() {
				in.Skip()
				out.FinancingDaysOfWeek = nil
			} else {
				in.Delim('[')
				if out.FinancingDaysOfWeek == nil {
					if !in.IsDelim(']') {
						out.FinancingDaysOfWeek = make([]FinancingDayOfWeek, 0, 2)
					} else {
						out.FinancingDaysOfWeek = []FinancingDayOfWeek{}
					}
				} else {
					out.FinancingDaysOfWeek = (out.FinancingDaysOfWeek)[:0]
				}
				for !in.IsDelim(']') {
					var v10 FinancingDayOfWeek
					easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel8(in, &v10)
					out.FinancingDaysOfWeek = append(out.FinancingDaysOfWeek, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel6(out *jwriter.Writer, in InstrumentFinancing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"longRate\":"
		out.RawString(prefix[1:])
		out.String(string(in.LongRate))
	}
	{
		const prefix string = ",\"shortRate\":"
		out.RawString(prefix)
		out.String(string(in.ShortRate))
	}
	{
		const prefix string = ",\"financingDaysOfWeek\":"
		out.RawString(prefix)
		if in.FinancingDaysOfWeek == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.FinancingDaysOfWeek {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel8(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel8(in *jlexer.Lexer, out *FinancingDayOfWeek) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dayOfWeek":
			out.DayOfWeek = DayOfWeek(in.String())
		case "daysCharged":
			out.DaysCharged = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel8(out *jwriter.Writer, in FinancingDayOfWeek) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dayOfWeek\":"
		out.RawString(prefix[1:])
		out.String(string(in.DayOfWeek))
	}
	{
		const prefix string = ",\"daysCharged\":"
		out.RawString(prefix)
		out.Int64(int64(in.DaysCharged))
	}
	out.RawByte('}')
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel5(in *jlexer.Lexer, out *GuaranteedStopLossOrderLevelRestriction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volume":
			out.Volume = DecimalNumber(in.String())
		case "priceRange":
			out.PriceRange = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel5(out *jwriter.Writer, in GuaranteedStopLossOrderLevelRestriction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix[1:])
		out.String(string(in.Volume))
	}
	{
		const prefix string = ",\"priceRange\":"
		out.RawString(prefix)
		out.String(string(in.PriceRange))
	}
	out.RawByte('}')
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel9(in *jlexer.Lexer, out *AccountConfigurationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientConfigureTransaction":
			if in.IsNull() {
				in.Skip()
				out.ClientConfigureTransaction = nil
			} else {
				if out.ClientConfigureTransaction == nil {
					out.ClientConfigureTransaction = new(ClientConfigureTransaction)
				}
				easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel10(in, out.ClientConfigureTransaction)
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel9(out *jwriter.Writer, in AccountConfigurationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientConfigureTransaction\":"
		out.RawString(prefix[1:])
		if in.ClientConfigureTransaction == nil {
			out.RawString("null")
		} else {
			easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel10(out, *in.ClientConfigureTransaction)
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountConfigurationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountConfigurationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountConfigurationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountConfigurationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel9(l, v)
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel10(in *jlexer.Lexer, out *ClientConfigureTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = TransactionType(in.String())
		case "alias":
			out.Alias = string(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		case "id":
			out.Id = TransactionID(in.String())
		case "time":
			out.Time = DateTime(in.String())
		case "userID":
			out.UserID = int64(in.Int64())
		case "accountID":
			out.AccountID = AccountID(in.String())
		case "batchID":
			out.BatchID = TransactionID(in.String())
		case "requestID":
			out.RequestID = RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel10(out *jwriter.Writer, in ClientConfigureTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"accountID\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"batchID\":"
		out.RawString(prefix)
		out.String(string(in.BatchID))
	}
	{
		const prefix string = ",\"requestID\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel11(in *jlexer.Lexer, out *AccountConfigurationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alias":
			out.Alias = string(in.String())
		case "marginRate":
			out.MarginRate = DecimalNumber(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel11(out *jwriter.Writer, in AccountConfigurationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix[1:])
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"marginRate\":"
		out.RawString(prefix)
		out.String(string(in.MarginRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountConfigurationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountConfigurationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountConfigurationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountConfigurationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel11(l, v)
}
func easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel12(in *jlexer.Lexer, out *AccountChangesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			if in.IsNull() {
				in.Skip()
				out.Changes = nil
			} else {
				in.Delim('[')
				if out.Changes == nil {
					if !in.IsDelim(']') {
						out.Changes = make([]*AccountChanges, 0, 8)
					} else {
						out.Changes = []*AccountChanges{}
					}
				} else {
					out.Changes = (out.Changes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *AccountChanges
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(AccountChanges)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Changes = append(out.Changes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastTransactionID":
			out.LastTransactionID = TransactionID(in.String())
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(AccountChangesState)
				}
				(*out.State).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel12(out *jwriter.Writer, in AccountChangesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		out.RawString(prefix[1:])
		if in.Changes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Changes {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastTransactionID\":"
		out.RawString(prefix)
		out.String(string(in.LastTransactionID))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		if in.State == nil {
			out.RawString("null")
		} else {
			(*in.State).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountChangesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountChangesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD9178d51EncodeGithubComKamaiuOandaGoModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountChangesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountChangesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD9178d51DecodeGithubComKamaiuOandaGoModel12(l, v)
}
